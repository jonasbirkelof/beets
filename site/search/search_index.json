{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Beets project!","text":"<p>The project Beets started out as an addon to the Bootstrap library. Adding classes that I found missing or lacking in the otherwise fully featured css library gave me a better workflow as components and functions I often used became more accessible. Now this is called Beets CSS.</p> <p>Later came Beets Layout wich provided a scaffolding system for web apps developed with Bootstrap (and Beets CSS). The idea behind this library was to give the user a good starting point for any kind of website, regardless if it's a single page layout or a dashboard with features like collapsing sidebar and header. The goal was also to make it modular and easy to configure with a couple of styles for the sidebar navigation.</p> <p>As a PHP developer I found myself creating the same tools, login scripts and classes over and over again. Also my competence developed and I wanted to improve my previous projects with my newly found knowledge. One thing lead to another and a mini-framework was born, entering Beets PHP. This small PHP framework includes a router (Braums router), autoloading, user administration functionality, form validation, SCSS-compiler, .env and more!</p> <p>This project is always growing and developing. Right now my primary focus is on Beets PHP, but please feel free to use every part of this project and give feedback on GitHub!</p> GitHub GitHub GitHub <p>Bears, Beets, Battlestar Galactica.</p>"},{"location":"beets-css/","title":"","text":"<p>Beets CSS is a CSS addon-library that is dependent on the Bootstrap framework. You will have to install Bootstrap for this library to work.</p> <p>The porpose of Beets CSS is to tweek the already great Bootstrap framework and give it a somewhat new feel and some new functions. Beside a number of subtle design changes there are new button types, cursor classes and dropdown functions. Please refer to the documentation to learn more about what is different from the default Bootstrap experience.</p> <p>Bootstrap is open source and because of that Beets CSS is also open source. On the projects GitHub page you can access all of the source files and tweek it yourself as you wish.</p>"},{"location":"beets-css/getting-started/","title":"Getting started","text":""},{"location":"beets-css/getting-started/#bootstrap","title":"Bootstrap","text":"<p>First of all, you need to have Bootstrap installed and working on your site. Please refer to the Bootstrap documentation for how to install Bootstrap. Beets CSS 2.0 is developed using Bootstrap version 5.2.2 so make sure you have at least that version installed.</p>"},{"location":"beets-css/getting-started/#beets-css","title":"Beets CSS","text":"<p>For the latest version of Beets CSS, plese see the GitHub Releases page.</p>"},{"location":"beets-css/getting-started/#source-css-files","title":"Source CSS files","text":"<p>If you want to make tweeks or changes to Beets CSS and mabye add a custom color scheme, you can use the soure SCSS files and compile Beets CSS yourself. There is not much \"magic\" going on so any sass compiler should do the trick. Beets CSS is developed using Webpack, Autoprefixer and PostCSS.</p>"},{"location":"beets-css/getting-started/#pre-compiled-css-file","title":"Pre-compiled CSS file","text":"<p>If you just want the out-of-the-box Beets CSS you can download the pre-compiled CSS file and add <code>beets-css.css</code> to your <code>&lt;head&gt;</code> tag like you normally would.</p>"},{"location":"beets-css/components/breadcrumb/","title":"Breadcrumb","text":""},{"location":"beets-css/components/breadcrumb/#breadcrumb","title":"Breadcrumb","text":"<p>The only thing that is different betewwn Beets and Bootstrap is the formatting of the links. The Bootstrap links are underlined where the Beets links are only underlined while hovering.</p> <ol> <li>Home</li> <li>Library</li> <li>Data</li> </ol> <pre><code>&lt;nav aria-label=\"breadcrumb\"&gt;\n    &lt;ol class=\"breadcrumb\"&gt;\n        &lt;li class=\"breadcrumb-item\"&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n        &lt;li class=\"breadcrumb-item\"&gt;&lt;a href=\"#\"&gt;Library&lt;/a&gt;&lt;/li&gt;\n        &lt;li class=\"breadcrumb-item active\" aria-current=\"page\"&gt;Data&lt;/li&gt;\n    &lt;/ol&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"beets-css/components/buttons/","title":"Buttons","text":""},{"location":"beets-css/components/buttons/#buttons","title":"Buttons","text":"<p>Beets CSS comes with two additional button styles: Ghost and Alternative. There is also a class that forces the button to be an exact square. Useful for buttons containing icons or user initials.</p>"},{"location":"beets-css/components/buttons/#styles","title":"Styles","text":"<p>The Beets CSS styles both make use of the Bootstrap theme colors for your convenience.</p>"},{"location":"beets-css/components/buttons/#regular","title":"Regular","text":"<p>Note</p> <p>This is the standard Bootstrap button. This is in the documentation for comparison purposes.</p> <p><code>.btn-{theme-color}</code></p> Primary Secondary Success Warning Danger Info Light Dark Link <pre><code>&lt;button class=\"btn btn-primary\"&gt;Primary&lt;/button&gt;\n&lt;button class=\"btn btn-link\"&gt;Link&lt;/button&gt;\n</code></pre>"},{"location":"beets-css/components/buttons/#outline","title":"Outline","text":"<p>Note</p> <p>This is the standard outlined Bootstrap button. This is in the documentation for comparison purposes.</p> <p><code>.btn-outline-{theme-color}</code></p> Primary Secondary Success Warning Danger Info Light Dark <pre><code>&lt;button class=\"btn btn-outline-primary\"&gt;Primary&lt;/button&gt;\n</code></pre>"},{"location":"beets-css/components/buttons/#alternative","title":"Alternative","text":"<p>This style can be viewed as a slightly lighter version of the standard buttons.</p> <p><code>.btn-alt-{theme-color}</code></p> Primary Secondary Success Warning Danger Info Light Dark <pre><code>&lt;button class=\"btn btn-alt-primary\"&gt;Primary&lt;/button&gt;\n&lt;button class=\"btn btn-alt-secondary\"&gt;Secondary&lt;/button&gt;\n&lt;button class=\"btn btn-alt-success\"&gt;Success&lt;/button&gt;\n&lt;button class=\"btn btn-alt-warning\"&gt;Warning&lt;/button&gt;\n&lt;button class=\"btn btn-alt-danger\"&gt;Danger&lt;/button&gt;\n&lt;button class=\"btn btn-alt-info\"&gt;Info&lt;/button&gt;\n&lt;button class=\"btn btn-alt-light\"&gt;Light&lt;/button&gt;\n&lt;button class=\"btn btn-alt-dark\"&gt;Dark&lt;/button&gt;\n</code></pre>"},{"location":"beets-css/components/buttons/#ghost","title":"Ghost","text":"<p>This style makes the button background transparent with the text colored with the chosen theme color. When hovering, the background gets a light version of the theme color.</p> <p><code>.btn-ghost-{theme-color}</code></p> Primary Secondary Success Warning Danger Info Light Dark <pre><code>&lt;button class=\"btn btn-ghost-primary\"&gt;Primary&lt;/button&gt;\n&lt;button class=\"btn btn-ghost-secondary\"&gt;Secondary&lt;/button&gt;\n&lt;button class=\"btn btn-ghost-success\"&gt;Success&lt;/button&gt;\n&lt;button class=\"btn btn-ghost-warning\"&gt;Warning&lt;/button&gt;\n&lt;button class=\"btn btn-ghost-danger\"&gt;Danger&lt;/button&gt;\n&lt;button class=\"btn btn-ghost-info\"&gt;Info&lt;/button&gt;\n&lt;button class=\"btn btn-ghost-light\"&gt;Light&lt;/button&gt;\n&lt;button class=\"btn btn-ghost-dark\"&gt;Dark&lt;/button&gt;\n</code></pre>"},{"location":"beets-css/components/buttons/#square","title":"Square","text":"<p>This is designed for use with an icon like FontAwsome, or short text like initials. The width and height are the same and the content is center vertically and horizontally.</p> <p>To use the square button style, add <code>.btn-square</code> to your standard <code>.btn</code> button.</p>"},{"location":"beets-css/components/buttons/#sizes","title":"Sizes","text":"<p>The <code>.btn-square</code> class also supports the different button sizes.</p> <pre><code>&lt;button class=\"btn btn-primary btn-square btn-lg\"&gt;&lt;i class=\"fa-solid fa-user fa-lg\"&gt;&lt;/i&gt;&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square\"&gt;&lt;i class=\"fa-solid fa-user\"&gt;&lt;/i&gt;&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square btn-sm\"&gt;&lt;i class=\"fa-solid fa-user fa-sm\"&gt;&lt;/i&gt;&lt;/button&gt;\n</code></pre>"},{"location":"beets-css/components/buttons/#inspiration","title":"Inspiration","text":"<p>Here are some buttons for your inspiration!</p> JB <pre><code>&lt;button class=\"btn btn-square btn-primary\"&gt;&lt;i class=\"fa-solid fa-user\"&gt;&lt;/i&gt;&lt;/button&gt;\n&lt;button class=\"btn btn-square btn-primary rounded-circle\"&gt;JB&lt;/button&gt;\n&lt;button class=\"btn btn-square btn-outline-secondary rounded-circle\"&gt;&lt;i class=\"fa-solid fa-pen\"&gt;&lt;/i&gt;&lt;/button&gt;\n&lt;button class=\"btn btn-square btn-outline-danger rounded-0\"&gt;&lt;i class=\"fa-solid fa-trash\"&gt;&lt;/i&gt;&lt;/button&gt;\n&lt;button class=\"btn btn-square btn-ghost-secondary\"&gt;&lt;i class=\"fa-solid fa-bars\"&gt;&lt;/i&gt;&lt;/button&gt;\n&lt;button class=\"btn btn-square btn-ghost-dark rounded-circle\"&gt;&lt;i class=\"fa-solid fa-arrow-left\"&gt;&lt;/i&gt;&lt;/button&gt;\n</code></pre>"},{"location":"beets-css/components/buttons/#responsiveness","title":"Responsiveness","text":"<p>You can use breakpoints <code>.btn-square-{sm|md|lg|xl|xxl}-0</code> to decide from what screen size a button should have the square class.</p> XS SM MD LG XL XXL <pre><code>&lt;button class=\"btn btn-primary btn-square\"&gt;XS&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square-sm\"&gt;SM&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square-md\"&gt;MD&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square-lg\"&gt;LG&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square-xl\"&gt;XL&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square-xxl\"&gt;XXL&lt;/button&gt;\n</code></pre>"},{"location":"beets-css/components/buttons/#reset","title":"Reset","text":"<p>You can also use the reset class <code>.btn-square-0</code> to remove the square styling.</p> <p>The reset class is also responsive with the <code>.btn-square-{sm|md|lg|xl|xxl}-0</code> class which makes it useful for when you don't want to have a square button on smaller screen sizes.</p> XS SM MD LG XL XXL <pre><code>&lt;button class=\"btn btn-primary btn-square-0\"&gt;XS&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square-sm-0\"&gt;SM&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square-md-0\"&gt;MD&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square-lg-0\"&gt;LG&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square-xl-0\"&gt;XL&lt;/button&gt;\n&lt;button class=\"btn btn-primary btn-square-xxl-0\"&gt;XXL&lt;/button&gt;\n</code></pre>"},{"location":"beets-css/components/callout/","title":"Callout","text":""},{"location":"beets-css/components/callout/#callout","title":"Callout","text":"<p>A callout can be used as a short information notice. Unlike the Bootstrap alert, this is not meant to call for the users attention when an action has happened. The icons are automaticlly populated within the header.</p> <p>The callout has a parent class <code>.callout</code> and two child classes: <code>.callout-header</code> and <code>.callout-body</code>. </p> <p>The <code>.callout</code> class has two config classes; a styling class and an icon class.</p> Header Body Header Body <pre><code>&lt;div class=\"callout callout-note\"&gt;\n    &lt;div class=\"callout-header\"&gt;\n        Header\n    &lt;/div&gt;\n    &lt;div class=\"callout-body\"&gt;\n        Body\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\"callout callout-note callout-no-icon\"&gt;\n    &lt;div class=\"callout-header\"&gt;\n        Header\n    &lt;/div&gt;\n    &lt;div class=\"callout-body\"&gt;\n        Body\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/components/callout/#icons","title":"Icons","text":"<p>Every callout style has a complimentary icon that is automaticlly added to the <code>::before</code> pseudo-element of <code>.callout-header</code>. The icons that are used are svg's from the free version of Font awesome.</p> <p>You can remove the icon using the <code>.callout-no-icon</code> class. This makes it possible to add a custom icon.</p> Default icon No icon Custom icon <pre><code>&lt;div class=\"callout callout-note\"&gt;\n    &lt;div class=\"callout-header\"&gt;\n        Default icon\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\"callout callout-note callout-no-icon\"&gt;\n    &lt;div class=\"callout-header\"&gt;\n        No icon\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\"callout callout-note callout-no-icon\"&gt;\n    &lt;div class=\"callout-header\"&gt;\n        &lt;i class=\"fa-solid fa-heart me-3\"&gt;&lt;/i&gt;Custom icon\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/components/callout/#bootstrap-icons","title":"Bootstrap icons","text":"<p>If you prefer lighter icons you can use the <code>.callout-bs-icons</code> to change out the Font awesome icons to Bootstrap icons. See the different icons under Styles below.</p> Bootstrap icon <pre><code>&lt;div class=\"callout callout-note callout-bs-icon\"&gt;\n    &lt;div class=\"callout-header\"&gt;\n        Bootstrap icon\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/components/callout/#styling","title":"Styling","text":"<p>To style the callout you add a <code>.callout-{type}</code> class. All classes are listed below.</p> <p>Note</p> <p>Proper support for Boostrap theme colors will come later</p> Default (Font awesome) iconsBootstrap icons <p> Note Summary Info Todo Tip Success Question Warning Failure Danger Bug Example Quote <pre><code>&lt;div class=\"callout callout-note\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-summary\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-info\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-todo\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-tip\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-success\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-question\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-warning\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-failure\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-danger\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bug\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-example\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-quote\"&gt;...&lt;/div&gt;\n</code></pre></p> <p> Note Summary Info Todo Tip Success Question Warning Failure Danger Bug Example Quote <pre><code>&lt;div class=\"callout callout-bs-icon callout-note\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-summary\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-info\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-todo\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-tip\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-success\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-question\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-warning\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-failure\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-danger\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-bug\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-example\"&gt;...&lt;/div&gt;\n&lt;div class=\"callout callout-bs-icon callout-quote\"&gt;...&lt;/div&gt;\n</code></pre></p>"},{"location":"beets-css/components/callout/#header","title":"Header","text":"<p>You can use the header without the body if you just want a quick info with some coloring.</p> Header Header <pre><code>&lt;div class=\"callout callout-note\"&gt;\n    &lt;div class=\"callout-header\"&gt;\n        Header\n    &lt;/div&gt;\n&lt;/div&gt;  \n\n&lt;div class=\"callout callout-note callout-no-icon\"&gt;\n    &lt;div class=\"callout-header\"&gt;\n        Header\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/components/callout/#body","title":"Body","text":"<p>The body can contain the information you want to communicate. It can be used without the header for a more compact style.</p>              Body          <pre><code>&lt;div class=\"callout callout-note\"&gt;\n    &lt;div class=\"callout-body\"&gt;\n        Body\n    &lt;/div&gt;\n&lt;/div&gt;  \n</code></pre>"},{"location":"beets-css/components/card/","title":"Card","text":""},{"location":"beets-css/components/card/#card","title":"Card","text":"<p>The changes made to the card classes are mostly related to spacings.</p> <p>The header and footer has white backgrounds as default instead of light gray. Use the Bootstrap class <code>.bg-light</code> on <code>.card-header</code> and <code>.card-footer</code> to make it look like the Bootstrap default.</p>"},{"location":"beets-css/components/card/#example","title":"Example","text":"Header Card title Card subtitle <p>Some quick example text to build on the card title and make up the bulk of the card's content.</p> Go somewhere Footer <pre><code>&lt;div class=\"card\"&gt;\n    &lt;div class=\"card-header\"&gt;Header&lt;/div&gt;\n    &lt;div class=\"card-body\"&gt;\n        &lt;h3 class=\"card-title\"&gt;Card title&lt;/h3&gt;\n        &lt;h6 class=\"card-subtitle mb-2 text-muted\"&gt;Card subtitle&lt;/h6&gt;\n        &lt;p class=\"card-text\"&gt;Some quick example text to build on the card title and make up the bulk of the card's content.&lt;/p&gt;\n        &lt;button class=\"btn btn-primary\"&gt;Go somewhere&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div class=\"card-footer\"&gt;Footer&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/components/card/#card-table","title":"Card Table","text":"<p>You can have a table bypass the <code>.card-body</code> gutter and span the full width of the card for a stylish look. Just wrap the <code>&lt;table&gt;</code> tag with a div with <code>.card-table</code> and remove the padding on the y-axis on <code>.card-body</code> and the bottom margin of the table with <code>.margin-bottom</code>.</p> <p>The styling can be used to gice the table rounded corners which can't be done by using the <code>.rounded-*</code> classes.</p> # 1 2 3 1 A A A 2 B B B <pre><code>&lt;div class=\"card\"&gt;\n    &lt;div class=\"card-body py-0\"&gt;            \n        &lt;div class=\"card-table\"&gt;\n            &lt;table class=\"table mb-0\"&gt;\n                ...\n            &lt;/table&gt;\n        &lt;/div&gt;          \n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> This is a headline <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Odit molestias labore consequuntur ut temporibus vero quasi recusandae culpa, esse doloremque ullam odio distinctio quibusdam laborum adipisci nam porro, quos quisquam veniam voluptatibus rerum unde.</p> # 1 2 3 1 A A A 2 B B B 3 C C C <pre><code>&lt;div class=\"card\"&gt;\n    &lt;div class=\"card-body pb-0\"&gt;\n        &lt;h3 class=\"card-title\"&gt;This is a headline&lt;/h3&gt;\n        &lt;p class=\"card-text\"&gt;...&lt;/p&gt;\n        &lt;div class=\"card-table\"&gt;\n            &lt;table class=\"table mb-0\"&gt;\n                ...\n            &lt;/table&gt;\n        &lt;/div&gt;          \n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/components/dropdowns/","title":"Dropdowns","text":""},{"location":"beets-css/components/dropdowns/#dropdowns","title":"Dropdowns","text":"<p>The Beets CSS dropdowns has a nice shadow!</p>              Dropdown button          <ul> <li>Action</li> <li>Another action</li> <li>Something else here</li> </ul> <pre><code>&lt;div class=\"dropdown\"&gt;\n    &lt;button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"&gt;\n        Dropdown button\n    &lt;/button&gt;\n    &lt;ul class=\"dropdown-menu\"&gt;\n        &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Action&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Another action&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Something else here&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/components/dropdowns/#no-caret","title":"No caret","text":"<p>With the <code>.dropdown-no-caret</code> class on the <code>&lt;button&gt;</code> tag you can remove the default caret from the dropdown button. This is really useful when you want a nice menu button, for instance.</p>                  No caret              <pre><code>&lt;div class=\"dropdown\"&gt;\n    &lt;button class=\"btn btn-primary dropdown-toggle dropdown-no-caret\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"&gt;\n        No caret\n    &lt;/button&gt;\n    ...\n&lt;/div&gt;\n&lt;div class=\"dropdown\"&gt;\n    &lt;button class=\"btn btn-primary btn-square dropdown-toggle dropdown-no-caret\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"&gt;\n        &lt;i class=\"fa-solid fa-bars\"&gt;&lt;/i&gt;\n    &lt;/button&gt;\n    ...\n&lt;/div&gt;\n&lt;div class=\"dropdown\"&gt;\n    &lt;button class=\"btn btn-ghost-secondary btn-square rounded-circle dropdown-toggle dropdown-no-caret\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"&gt;\n        &lt;i class=\"fa-solid fa-cog\"&gt;&lt;/i&gt;\n    &lt;/button&gt;\n    ...\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/components/dropdowns/#custom-caret","title":"Custom caret","text":"<p>With the default caret removed, you can easily add your own custom carets with something like Font Awesome and som styling!</p>              Custom caret          <pre><code>&lt;div class=\"dropdown\"&gt;\n    &lt;button class=\"btn btn-primary dropdown-toggle dropdown-no-caret\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"&gt;\n        Custom caret\n        &lt;i class=\"fa-solid fa-xs fa-chevron-down ms-1\"&gt;&lt;/i&gt;\n    &lt;/button&gt;\n    &lt;ul class=\"dropdown-menu\"&gt;\n        &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Action&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Another action&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Something else here&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/components/modal/","title":"Modal","text":""},{"location":"beets-css/components/modal/#modal","title":"Modal","text":"<p>The modals have just been styled slightly to look like the cards with a little wider x-axis padding on the body, header and footer as well as a shadow.</p> <p>The last <code>&lt;p&gt;</code> tag in the body will have <code>margin-bottom: 0;</code> automaticlly. You can add <code>.mb-3</code> to the last <code>&lt;p&gt;</code> tag to bypass this.</p> Modal title <p>Modal body text goes here.</p> <p>Modal body text goes here.</p> Save changes Close"},{"location":"beets-css/forms/checks-and-radios/","title":"Checks and Radios","text":"<p>In Beets CSS you have assex to checkboxes, radios and switches styled by the theme colors. The reason why Bootstrap haven't included this functionality is propably because they have build in form validation, that styles the form controls like <code>success</code> or <code>danger</code> if the input is valid or invalid. This is a really good reason so be careful styling your forms with the classes below!</p> <p>What is actually useful is the fact that you can create your own theme color and use it within your form! </p> <p>You add the <code>.form-check-*</code> class to any <code>&lt;div class=\"form-check\"&gt;</code> to style the form control.</p>"},{"location":"beets-css/forms/checks-and-radios/#checkbox","title":"Checkbox","text":"Primary Secondary Success Warning Danger Info Light Dark <pre><code>&lt;div class=\"form-check form-check-inline form-check-primary\"&gt;\n    &lt;input class=\"form-check-input\" type=\"checkbox\" id=\"inlineCheckbox1\"&gt;\n    &lt;label class=\"form-check-label\" for=\"inlineCheckbox1\"&gt;Primary&lt;/label&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/forms/checks-and-radios/#radio","title":"Radio","text":"Primary Secondary Success Warning Danger Info Light Dark <pre><code>&lt;div class=\"form-check form-check-inline form-check-primary\"&gt;\n    &lt;input class=\"form-check-input\" type=\"radio\" id=\"inlineRadio1\" name=\"inlineRadio1\"&gt;\n    &lt;label class=\"form-check-label\" for=\"inlineRadio1\"&gt;Primary&lt;/label&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/forms/checks-and-radios/#switch","title":"Switch","text":"Primary Secondary Success Warning Danger Info Light Dark <pre><code>&lt;div class=\"form-check form-switch form-check-inline form-check-primary\"&gt;\n    &lt;input class=\"form-check-input\" type=\"checkbox\" id=\"inlineCheckbox1\"&gt;\n    &lt;label class=\"form-check-label\" for=\"inlineCheckbox1\"&gt;Primary&lt;/label&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-css/utilities/colors/","title":"Colors","text":"<p>If you use a sass compiler you can easily add your own custom colors to the css variables and Bootstrap theme. This can be done even without Beets CSS, but we have lifted out the function to a separate file.</p> <p>In the scss folder and in the maps folder there is a file named _bcss-custom-colors-scss. Here you can create and name you own colors.</p> scss/maps/_bcss-custom-colors.scss<pre><code>// Custom colors\n$crimson: #9a0044;\n$magenta: #d63384;\n$gold: #fd7e14;\n$turquoise: #20c997;\n\n// Custom colors map (add to css variables)\n$beets-colors: (\n    \"crimson\": $crimson,\n    \"magenta\": $magenta,\n    \"gold\": $gold,\n    \"turquoise\": $turquoise,\n);\n\n// Merge with colors map\n$colors: map-merge($colors, $beets-colors);\n\n// Custom theme colors map (add to Bootstrap theme)\n$beets-theme-colors: (\n    \"beets\": $crimson,\n    \"bubblegum\": $magenta,\n    \"autumn\": $gold,\n    \"spring\": $turquoise,\n);\n\n// Merge with theme colors map\n$theme-colors: map-merge($theme-colors, $beets-theme-colors);\n</code></pre>"},{"location":"beets-css/utilities/cursor/","title":"Cursor","text":"<p>You can change the cursor style on hover with these classes. Hover over the boxes below to preview.</p> .cursor-crosshair .cursor-default .cursor-help .cursor-initial .cursor-move .cursor-none .cursor-not-allowed .cursor-pointer .cursor-progress .cursor-text .cursor-wait .cursor-zoom-in .cursor-zoom-out <pre><code>&lt;div class=\"bg-light border rounded p-1 cursor-pointer\"&gt;.cursor-pointer&lt;/div&gt;\n</code></pre> Class name Property <code>.cursor-crosshair</code> <code>cursor: crosshair !important;</code> <code>.cursor-default</code> <code>cursor: default !important;</code> <code>.cursor-help</code> <code>cursor: help !important;</code> <code>.cursor-inital</code> <code>cursor: inital !important;</code> <code>.cursor-move</code> <code>cursor: move !important;</code> <code>.cursor-none</code> <code>cursor: none !important;</code> <code>.cursor-not-allowed</code> <code>cursor: not-allowed !important;</code> <code>.cursor-pointer</code> <code>cursor: pointer !important;</code> <code>.cursor-progress</code> <code>cursor: progress !important;</code> <code>.cursor-text</code> <code>cursor: text !important;</code> <code>.cursor-wait</code> <code>cursor: wait !important;</code> <code>.cursor-zoom-in</code> <code>cursor: zoom-in !important;</code> <code>.cursor-zoom-out</code> <code>cursor: zoom-out !important;</code>"},{"location":"beets-css/utilities/spacing/","title":"Spacing","text":"<ul> <li>The spacers 1-4 are the same as the Bootstrap default values</li> <li>5 is set to the gutter width (30px)</li> <li>6 is the original bootstrap value for 5</li> <li>7 and 8 are added for more variations</li> </ul> <p><code>$spacer</code> = 1rem = 16px.</p> Size 0 0 1 <code>$spacer * .25</code> 2 <code>$spacer * .5</code> 3 <code>$spacer</code> 4 <code>$spacer * 1.5</code> 5 <code>$grid-gutter-width</code> 6 <code>$spacer * 3</code> 7 <code>$spacer * 4</code> 8 <code>$spacer * 5</code>"},{"location":"beets-layout/","title":"","text":"<p>Beets Layout is a CSS and JavaScript library that gives you a good fundation for the layout in your HTML or PHP projects. The focus is set on dashboards but you can easily modify it to make it work with standard websites or single page applications.</p> <p>This library is not meant to give you every configuration option at your fingertip, but rather give you a complete starting point. You do have some options, i.e. on the looks of the header and sidebar.</p> <p>To get the quickest and best experience, you should use Beets Layout together with Bootstrap, although you can easily modify it to work with any fornt-end framework like Tailwind CSS.</p> <p>Consider using Beets Layout with Beets CSS and Beets PHP</p> <p>Beets Layout is developed using Boostrap 5.2.X.</p>"},{"location":"beets-layout/download/","title":"Download","text":"<p>For the latest version of Beets Layout, plese see the GitHub Releases page.</p> <p>The files are located under the section Assets of the version you want.</p> <ul> <li>Compiled files: beets-layout-v1.x.x-dist.zip</li> <li>Source files: beets-layout-v1.x.x-src.zip</li> </ul>"},{"location":"beets-layout/install/","title":"Install","text":""},{"location":"beets-layout/install/#compiled-css-files","title":"Compiled CSS files","text":"<ol> <li>Download and unzip the compiled version of Beets Layout: beets-layout-v1.x.x-dist.zip.</li> <li>Include beets-layout.css and beets-layout.js in the <code>&lt;head&gt;&lt;/head&gt;</code> section of your projects index file. <pre><code>&lt;link rel=\"stylesheet\" href=\"~/assets/css/beets-layout.css\"&gt;\n&lt;script src=\"~/assets/js/beets-layout.js\"&gt;&lt;/script&gt;\n</code></pre></li> </ol>"},{"location":"beets-layout/install/#source-files","title":"Source files","text":"<ol> <li>Download and unzip the source files: beets-layout-v1.x.x-src.zip.</li> <li>Move the folders scss/beets-layout and js/beets-layout to your resource folder in your project (from where you compile your resources, i.e. ~/resources/). You could <code>@include</code> the file beets-layout/beets-layout.scss in your main app.scss file.</li> <li>Compile beets-layout.scss and beets-layout.js into you public assets folder (i.e. ~/public/assets/).</li> </ol>"},{"location":"beets-layout/section/body/","title":"Body","text":""},{"location":"beets-layout/section/body/#structure","title":"Structure","text":"<p>The body section lives inside <code>.bl__main</code> and below <code>.bl__header</code>. It only has a basic design and no built in functionality.</p> <pre><code>&lt;div class=\"bl__body\"&gt;\n    ...\n&lt;/body&gt;\n</code></pre>"},{"location":"beets-layout/section/body/#content","title":"Content","text":"<p>The body section contains the main content of the site.</p>"},{"location":"beets-layout/section/footer/","title":"Footer","text":""},{"location":"beets-layout/section/footer/#structure","title":"Structure","text":"<p>The footer lives inside <code>.bl__body</code>, below <code>.bl__main</code>. It only has a basic design and no built in functionality.</p> <pre><code>&lt;footer class=\"bl__footer\"&gt;\n    ...\n&lt;/footer&gt;\n</code></pre>"},{"location":"beets-layout/section/footer/#content","title":"Content","text":"<p>The footer can contain content like copyright, navigation, contact information, etc.</p>"},{"location":"beets-layout/section/header/","title":"Header","text":""},{"location":"beets-layout/section/header/#structure","title":"Structure","text":"<pre><code>&lt;header class=\"bl__header\"&gt;\n    &lt;div class=\"header__logo\"&gt;\n        &lt;img src=\"\" alt=\"Logotype\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"header-collapse\" id=\"collapseId\"&gt;\n        &lt;!-- Navigation here --&gt;\n    &lt;/div&gt;\n&lt;/header&gt;\n</code></pre>"},{"location":"beets-layout/section/header/#styling","title":"Styling","text":"<p><code>.header-dark</code></p> <p>Beets Layout does not implement \"themes\" but you can still do some easy styling to make the header look like you want.</p> <p>By default the header is white with dark text. You can invert the text colors to work on a darker background by adding the <code>.header-dark</code> class to <code>.bl__header</code>. You can then add a background color using Bootstrap classes or your own custom css. This is by the way how Bootstrap styles their navigation component.</p> DefaultDarkCustom <p> </p> <pre><code>&lt;aside class=\"bl__header\"&gt;\n    ...\n&lt;/aside&gt;\n</code></pre> <p>  Using the Bootstrap class <code>.bg-dark</code>. <pre><code>&lt;aside class=\"bl__header header-dark bg-dark\"&gt;\n    ...\n&lt;/aside&gt;\n</code></pre></p> <p> </p> <pre><code>&lt;aside class=\"bl__header header-dark\" style=\"background-color: #045163;\"&gt;\n    ...\n&lt;/aside&gt;\n</code></pre>"},{"location":"beets-layout/section/header/#placement","title":"Placement","text":"<p><code>.header-sticky</code></p> <p>By default the header is following the scroll of the page, meaning that it will no longer be visible when scrolling on tall pages. If you want the header to remain at the top of the viewport while scrolling, you can add the class <code>.header-sticky</code> to <code>.bl__header</code>.</p> <pre><code>&lt;header class=\"bl__header header-sticky\"&gt;\n    ...\n&lt;/header&gt;\n</code></pre>"},{"location":"beets-layout/section/header/#collapsible-content","title":"Collapsible content","text":"<p>The header features a collapsible content section that can be used for i.e. navigations. When the viewport is smaller than the breakpoint, the collapsible section is hidden. It can be toggled on or off using the JavaScript function <code>toggleHeader()</code>.</p> <p>When the <code>toggleHeader()</code> function is activated, the <code>.header-collapse</code> will expand inside of the <code>.bl__header</code> on a new row (e.g. below the logotype).</p> DesktopMobile collapsedMobile expanded <p> </p> <p> </p> <p> </p> <pre><code>&lt;header class=\"bl__header justify-content-between\"&gt;\n\n    &lt;button class=\"btn btn-outline-secondary d-lg-none\" onclick=\"toggleSidebar()\"&gt;...&lt;/button&gt;\n\n    &lt;div class=\"header__logo\"&gt;\n        &lt;img src=\"\" alt=\"Logotype\"&gt;\n        &lt;span class=\"d-none d-lg-inline text-uppercase fw-semibold ms-2\"&gt;Beets Layout&lt;/span&gt;\n    &lt;/div&gt;\n\n    &lt;button class=\"btn btn-outline-secondary d-lg-none\" onclick=\"toggleHeader('header-nav')\"&gt;...&lt;/button&gt;\n\n    &lt;div class=\"header-collapse\" id=\"header-nav\"&gt;\n        ...\n    &lt;/div&gt;\n\n&lt;/header&gt;\n</code></pre>"},{"location":"beets-layout/section/header/#navigation","title":"Navigation","text":"<p>The navigation section is just an unordered list with list items that contains links. All elemnts are styled so that they can be collapsed and viewed properly on smaller devices.</p> <p>The navigation also honors the <code>.header-dark</code> styling.</p> <pre><code>&lt;header class=\"bl__header\"&gt;\n    &lt;div class=\"header-collapse\" id=\"header-nav\"&gt;\n        &lt;nav class=\"header__nav\"&gt;\n            &lt;ul class=\"nav-list\"&gt;\n                &lt;li class=\"nav-item\"&gt;&lt;a href=\"#\" class=\"nav-link active\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;&lt;a href=\"#\" class=\"nav-link\"&gt;About Us&lt;/a&gt;&lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;&lt;a href=\"#\" class=\"nav-link\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n    &lt;/div&gt;\n&lt;/header&gt;\n</code></pre>"},{"location":"beets-layout/section/logo/","title":"Logo","text":""},{"location":"beets-layout/section/logo/#structure","title":"Structure","text":"<p>The <code>.header__logo</code> wrapper is used to give a logo asset the correct size within the header, be it in <code>.sidebar__header</code> or <code>.bl__header</code>.</p> <p></p>"},{"location":"beets-layout/section/logo/#example-in-the-sidebar","title":"Example in the sidebar","text":"<pre><code>&lt;aside class=\"bl__sidebar\"&gt;\n    &lt;div class=\"sidebar__header\"&gt;\n        &lt;div class=\"header__logo\"&gt;\n            &lt;img src=\"...\" alt=\"Logotype\"&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/aside&gt;\n</code></pre>"},{"location":"beets-layout/section/logo/#example-in-the-main-header","title":"Example in the main header","text":"<pre><code>&lt;header class=\"bl__header\"&gt;\n    &lt;div class=\"header__logo\"&gt;\n        &lt;img src=\"...\" alt=\"Logotype\"&gt;\n    &lt;/div&gt;\n&lt;/header&gt;\n</code></pre>"},{"location":"beets-layout/section/logo/#css","title":"CSS","text":"<p>The logo image height is max 60% of the header height and the width is max the width of the sidebar minus the left and right padding.</p>"},{"location":"beets-layout/section/logo/#sass-variables","title":"Sass variables","text":"src/scss/beets-layout/_variables.scss<pre><code>$logo-img-height: $header-height * 0.6;\n$logo-img-width: $sidebar-width - (#{$gutter-x * 2});\n</code></pre>"},{"location":"beets-layout/section/main/","title":"Main","text":""},{"location":"beets-layout/section/main/#structure","title":"Structure","text":"<p>The main section is a wrapper for the main site components <code>.bl__header</code>, <code>.bl__body</code> and <code>.bl__footer</code>. It has no styling applied as default.</p> <p>When a sidebar is used, the <code>.bl__main</code> will get an offset to the sidebar with <code>margin-left: $sidebar-width;</code>. When the sidebar is collapsed on smaller viewports, the offset is removed to fill the viewport horizontally.</p> <p></p> <pre><code>&lt;main class=\"bl__main\"&gt;\n    &lt;header class=\"bl__header\"&gt;...&lt;/header&gt; \n    &lt;div class=\"bl__body\"&gt;...&lt;/div&gt;\n    &lt;footer class=\"bl__footer\"&gt;...&lt;/footer&gt;\n&lt;/main&gt;\n</code></pre>"},{"location":"beets-layout/section/overview/","title":"Overview","text":"<p>The layout framework is built inside a wrapper div with <code>id=\"beets-layout\"</code>. The wrapper is required for the underlaying section classes to work.</p>"},{"location":"beets-layout/section/overview/#the-structure","title":"The structure","text":"<p>This is the basic structure of the framework. Most of the sections have build in classes to modify them altering functionality or rudimentary styling. </p> <p>Please refer to each sections documentation (in the left navigation) for details.</p> <p></p> <pre><code>&lt;body&gt;\n\n    &lt;div id=\"beets-layout\"&gt;\n        &lt;aside class=\"bl__sidebar\"&gt;         \n            &lt;div class=\"sidebar__header\"&gt;Sidebar Header&lt;/div&gt;\n            &lt;div class=\"sidebar__body\"&gt;Sidebar Body&lt;/div&gt;\n            &lt;div class=\"sidebar__footer\"&gt;Sidebar Footer&lt;/div&gt;\n        &lt;/aside&gt;\n\n        &lt;main class=\"bl__main\"&gt;\n            &lt;header class=\"bl__header\"&gt;Header&lt;/header&gt;\n            &lt;div class=\"bl__body\"&gt;Body&lt;/div&gt;\n            &lt;footer class=\"bl__footer\"&gt;Footer&lt;/footer&gt;\n        &lt;/main&gt;\n    &lt;/div&gt;\n\n&lt;/body&gt;\n</code></pre> <p>First we have the wrapper that enables the classes that builds the layout, like <code>.bl__sidebar</code> and <code>.bl__body</code>. Inside the wrapper is the whole website. First we have a sidebar and then a body containing the site header, footer and the main content.</p> <p>This structure makes the layout versitile since you can just remove the <code>&lt;aside class=\"bl__sidebar\"&gt;&lt;/aside&gt;</code> element to have a single column layout with just the body (header, main and footer) which is suitable for singe page applications.</p> <p>Another good use case is when you don't nedd a lot of items in the navigation/header like links, search fields, etc. You can simply remove the <code>&lt;header class=\"bl__header\"&gt;&lt;/header&gt;</code> element to hide it.</p>"},{"location":"beets-layout/section/overview/#example-website","title":"Example website","text":"<p>Here is a more fleshed out example of what an index page could look like with some sample php code. This example uses the Bootstrap library to get a great experience directly. You should also consider using an icon framework like Font Awesome for your sidebar/header toggle buttons and sidebar links instead of the basic characters used in this example.</p> <p>Please refer to each sections documentation (in the left navigation) for details.</p> functions.php<pre><code>&lt;?php\n\nfunction pageIsActive($uris) \n{\n    $pageIsActive = false;\n    $page = isset($_GET['page']) ? $_GET['page'] : null;\n\n    foreach ($uris as $uri) {\n        if ($page == $uri) $pageIsActive = true;\n    }\n\n    return $pageIsActive;\n}\n\nfunction activePage($uris) \n{\n    return pageIsActive($uris) ? 'active' : null;\n}\n\nfunction openSubmenu($uris) \n{\n    return pageIsActive($uris) ? 'open' : null;\n}\n</code></pre> index.php<pre><code>&lt;?php\n\nrequire \"functions.php\";\n\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Beets Layout&lt;/title&gt;\n    &lt;!-- Link to your Bootstrap files --&gt;\n    &lt;link rel=\"stylesheet\" href=\"bootstrap.css\"&gt;\n    &lt;script src=\"bootstrap.bundle.js\"&gt;&lt;/script&gt;\n    &lt;!-- Link to your Beets Layout files --&gt;\n    &lt;link rel=\"stylesheet\" href=\"beets-layout.css\"&gt;\n    &lt;script src=\"beets-layout.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;!-- Beets Layout wrapper --&gt;\n    &lt;div id=\"beets-layout\"&gt;\n\n        &lt;!-- Sidebar --&gt;\n        &lt;aside class=\"bl__sidebar sidebar-collapse sidebar-dark bg-dark\"&gt;\n\n            &lt;div class=\"sidebar__header justify-content-between\"&gt;\n                &lt;div class=\"header__logo\"&gt;\n                    &lt;img src=\"logotype.png\" alt=\"Logotype\"&gt;\n                &lt;/div&gt;\n                &lt;button class=\"btn btn-primary d-lg-none\" onclick=\"toggleSidebar()\"&gt;X&lt;/button&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"sidebar__body\"&gt;\n                &lt;!-- Navigation --&gt;\n                &lt;nav class=\"sidebar__nav nav-rounded nav-accent-primary\"&gt;\n                    &lt;ul class=\"nav-list mb-0\"&gt;\n                        &lt;li class=\"list-item\"&gt;\n                            &lt;a href=\"?page=dashboard\" class=\"nav-link &lt;?= activePage(['dashboard']) ?&gt;\"&gt;\n                                &lt;div class=\"nav-link-icon\"&gt;&amp;lt;i&amp;gt;&lt;/div&gt;\n                                Dashboard\n                            &lt;/a&gt;\n                        &lt;/li&gt;\n                        &lt;?php $submenuItems = ['addUser', 'listUsers', 'removeUser']; ?&gt;\n                        &lt;li class=\"list-item &lt;?= openSubmenu($submenuItems) ?&gt;\"&gt;\n                            &lt;a href=\"#\" class=\"nav-link nav-link__submenu &lt;?= activePage($submenuItems) ?&gt;\" id=\"sub_users\" onclick=\"toggleSubmenu('sub_users')\"&gt;\n                                &lt;div class=\"nav-link-icon\"&gt;&amp;lt;i&amp;gt;&lt;/div&gt;\n                                Users\n                            &lt;/a&gt;\n                            &lt;ul class=\"nav-list__submenu\"&gt;\n                                &lt;li class=\"list-item\"&gt;&lt;a href=\"?page=addUser\" class=\"nav-link &lt;?= activePage(['addUser']) ?&gt;\"&gt;Add user&lt;/a&gt;&lt;/li&gt;\n                                &lt;li class=\"list-item\"&gt;&lt;a href=\"?page=listUsers\" class=\"nav-link &lt;?= activePage(['listUsers']) ?&gt;\"&gt;List users&lt;/a&gt;&lt;/li&gt;\n                                &lt;li class=\"list-item\"&gt;&lt;a href=\"?page=removeUser\" class=\"nav-link &lt;?= activePage(['removeUser']) ?&gt;\"&gt;Remove user&lt;/a&gt;&lt;/li&gt;\n                            &lt;/ul&gt;\n                        &lt;/li&gt;\n                        &lt;li class=\"list-item\"&gt;\n                            &lt;a href=\"?page=settings\" class=\"nav-link &lt;?= activePage(['settings']) ?&gt;\"&gt;\n                                &lt;div class=\"nav-link-icon\"&gt;&amp;lt;i&amp;gt;&lt;/div&gt;\n                                Settings\n                            &lt;/a&gt;\n                        &lt;/li&gt;\n                    &lt;/ul&gt;\n                &lt;/nav&gt;\n\n                &lt;hr class=\"sidebar__divider\"&gt;\n\n                &lt;nav class=\"sidebar__nav nav-compact nav-accent-primary\"&gt;\n                    &lt;ul class=\"nav-list\"&gt;\n                        &lt;li class=\"list-item\"&gt;\n                            &lt;a href=\"?page=link-1\" class=\"nav-link &lt;?= activePage(['link-1']) ?&gt;\"&gt;Link 1&lt;/a&gt;\n                        &lt;/li&gt;\n                        &lt;li class=\"list-item\"&gt;\n                            &lt;a href=\"?page=link-2\" class=\"nav-link &lt;?= activePage(['link-2']) ?&gt;\"&gt;Link 2&lt;/a&gt;\n                        &lt;/li&gt;\n                        &lt;li class=\"list-item\"&gt;\n                            &lt;a href=\"?page=link-3\" class=\"nav-link &lt;?= activePage(['link-3']) ?&gt;\"&gt;Link 3&lt;/a&gt;\n                        &lt;/li&gt;\n                    &lt;/ul&gt;\n                &lt;/nav&gt;\n\n            &lt;/div&gt;\n\n            &lt;div class=\"sidebar__footer\"&gt;\n                SIDEBAR FOOTER\n            &lt;/div&gt;\n\n        &lt;/aside&gt;\n\n        &lt;!-- Main --&gt;\n        &lt;main class=\"bl__main\"&gt;\n\n            &lt;!-- Header --&gt;\n            &lt;header class=\"bl__header justify-content-between header-sticky px-3 px-lg-4\"&gt;\n\n                &lt;button class=\"btn btn-primary d-lg-none\" onclick=\"toggleSidebar()\"&gt;=&lt;/button&gt;\n                &lt;div class=\"header__logo d-lg-none\"&gt;\n                    &lt;img src=\"logotype.png\" alt=\"Logotype\"&gt;\n                &lt;/div&gt;\n                &lt;button class=\"btn btn-primary d-lg-none\" onclick=\"toggleHeader('header-nav')\"&gt;...&lt;/button&gt;\n\n                &lt;div class=\"header-collapse\" id=\"header-nav\"&gt;\n                    &lt;nav class=\"header__nav\"&gt;\n                        &lt;ul class=\"nav-list\"&gt;\n                            &lt;li class=\"nav-item\"&gt;&lt;a href=\"?page=home\" class=\"nav-link &lt;?= activePage(['home']) ?&gt;\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n                            &lt;li class=\"nav-item\"&gt;&lt;a href=\"?page=about\" class=\"nav-link &lt;?= activePage(['about']) ?&gt;\"&gt;About Us&lt;/a&gt;&lt;/li&gt;\n                            &lt;li class=\"nav-item\"&gt;&lt;a href=\"?page=contact\" class=\"nav-link &lt;?= activePage(['contact']) ?&gt;\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n                        &lt;/ul&gt;\n                    &lt;/nav&gt;\n                &lt;/div&gt;\n\n            &lt;/header&gt;\n\n            &lt;!-- Body --&gt;\n            &lt;div class=\"bl__body\"&gt;\n                &lt;div class=\"container-fluid px-3 px-lg-4 pt-2\"&gt;\n                    BODY\n                &lt;/div&gt;\n            &lt;/div&gt;      \n\n            &lt;!-- Footer --&gt;\n            &lt;footer class=\"bl__footer\"&gt;\n                FOOTER\n            &lt;/footer&gt;\n\n        &lt;/main&gt;\n\n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/","title":"Sidebar","text":"<p>The sidebar stretches from top to bottom of the viewport and is rendered before the <code>.bl__main</code> section.</p>"},{"location":"beets-layout/section/sidebar/#structure","title":"Structure","text":"<p>Inside the sidebar there are tree sections that can contain different content: <code>.bl__header</code>, <code>.bl__body</code> and <code>.bl__footer</code>.</p> <p></p> <pre><code>&lt;aside class=\"bl__sidebar\"&gt;\n    &lt;div class=\"sidebar__header\"&gt;\n        &lt;div class=\"header__logo\"&gt;\n            &lt;img src=\"\" alt=\"Logotype\"&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"sidebar__body\"&gt;\n        &lt;nav class=\"sidebar__nav\"&gt;\n            &lt;!-- Navigation here --&gt;\n        &lt;/nav&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"sidebar__footer\"&gt;\n        Sidebar Footer\n    &lt;/div&gt;\n&lt;/aside&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#collapsible-sidebar","title":"Collapsible sidebar","text":"<p>By default the sidebar will not collapse on smaller viewports. If you want that functionality, you need to add the class <code>.sidebar-collapse</code> to <code>.bl__sidebar</code>.</p> <pre><code>&lt;aside class=\"bl__sidebar sidebar-collapse\"&gt;\n    ...\n&lt;/aside&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#styling","title":"Styling","text":"<p><code>.sidebar-dark</code></p> <p>Beets Layout does not implement \"themes\" but you can still do some easy styling to make the sidebar look like you want.</p> <p>By default the sidebar is white with darker elements. You can invert the colors to work on a darker background by adding the <code>.sidebar-dark</code> class to <code>.bl__sidebar</code>. You can then add a background color using Bootstrap classes or your own custom css.</p> DefaultDarkCustom <p></p> <pre><code>&lt;aside class=\"bl__sidebar\"&gt;\n    ...\n&lt;/aside&gt;\n</code></pre> <p></p> <p><pre><code>&lt;aside class=\"bl__sidebar sidebar-dark bg-dark\"&gt;\n    ...\n&lt;/aside&gt;\n</code></pre> Using the Bootstrap class <code>.bg-dark</code>.</p> <p></p> <pre><code>&lt;aside class=\"bl__sidebar sidebar-dark\" style=\"background-color: #045163;\"&gt;\n    ...\n&lt;/aside&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#header","title":"Header","text":"<p>The sidebar header can for instance contain a logotype and a close button  that activates <code>toggleSidebar()</code> on click for when the sidebar is visible on small devices.</p> <p>The following examples are using Bootstrap.</p> DesktopMobile expanded <p></p> <p></p> <pre><code>&lt;div class=\"sidebar__header justify-content-between\"&gt;\n    &lt;div class=\"header__logo\"&gt;\n        &lt;img src=\"\" alt=\"Logotype\"&gt;\n        &lt;span class=\"d-none d-lg-inline text-uppercase fw-semibold ms-2\"&gt;\n            Beets Layout\n        &lt;/span&gt;\n    &lt;/div&gt;\n    &lt;button class=\"btn btn-outline-secondary d-lg-none\" onclick=\"toggleSidebar()\"&gt;\n        ...\n    &lt;/button&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#body","title":"Body","text":"<p>This is the body and main content of the sidebar. You can place whatever you like in here but navigations and \"call to actions\" are probably most common.</p>"},{"location":"beets-layout/section/sidebar/#divider","title":"Divider","text":"<p>If you want to divide content, like two navigations or a cta and a navigation, you can use a <code>&lt;hr&gt;</code> tag with the <code>.sidebar__divider</code> class.</p> <pre><code>&lt;button&gt;Button&lt;/button&gt;\n\n&lt;hr class=\"sidebar__divider\"&gt;\n\n&lt;nav class=\"sidebar__nav\"&gt;\n    ...\n&lt;/nav&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#navigation","title":"Navigation","text":"<p>The navigation section is placed inside <code>.sidebar__body</code>. There can be multiple navigations in the sidebar body.</p> <pre><code>&lt;div class=\"sidebar__body\"&gt;\n    &lt;nav class=\"sidebar__nav\"&gt;\n        ...\n    &lt;/nav&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#structure_1","title":"Structure","text":"<p>Add the <code>.active</code> class to a <code>&lt;a class=\"nav_link\"&gt;&lt;/a&gt;</code> to style it as active.</p> <p></p> <pre><code>&lt;nav class=\"sidebar__nav\"&gt;\n    &lt;ul class=\"nav-list\"&gt;\n        &lt;li class=\"list-item\"&gt;\n            &lt;a href=\"#\" class=\"nav-link active\"&gt;\n                &lt;div class=\"nav-link-icon\"&gt;...&lt;/div&gt;\n                Link 1\n            &lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=\"list-item\"&gt;\n            &lt;a href=\"#\" class=\"nav-link\"&gt;\n                &lt;div class=\"nav-link-icon\"&gt;...&lt;/div&gt;\n                Link 2\n            &lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#styles","title":"Styles","text":""},{"location":"beets-layout/section/sidebar/#default","title":"Default","text":"<p>The default style is basic and offers a clean and minimalistic look. There is no class for this style as it is the default.</p>"},{"location":"beets-layout/section/sidebar/#simple","title":"Simple","text":"<p>The simple style is modern and distinct and can be found on many other sites, like admin pages. Add the class <code>.nav-style__simple</code> to <code>.sidebar__navigation</code> to use it.</p>"},{"location":"beets-layout/section/sidebar/#rounded","title":"Rounded","text":"<p>The rounded style has a modern and playful feel to it. Add the class <code>.nav-style__rounded</code> to <code>.sidebar__navigation</code> to use it.</p>"},{"location":"beets-layout/section/sidebar/#examples","title":"Examples","text":"DefaultSimpleRounded <pre><code>&lt;nav class=\"sidebar__nav\"&gt;\n    ...\n&lt;/nav&gt;\n</code></pre> <pre><code>&lt;nav class=\"sidebar__nav nav-style__simple\"&gt;\n    ...\n&lt;/nav&gt;\n</code></pre> <pre><code>&lt;nav class=\"sidebar__nav nav-style__rounded\"&gt;\n    ...\n&lt;/nav&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#compact-navigation","title":"Compact navigation","text":"<p>If you have many links in your navigation or if you have a secondary navigation that should be more subtle, you can use the compact style navigation. Add the class <code>.nav-style__compact</code> to <code>.sidebar__navigation</code>.</p> <p>Here are some examples using the different styles available:</p> DefaultSimpleRounded <p></p> <pre><code>&lt;nav class=\"sidebar__nav nav-style__compact\"&gt;\n    ...\n&lt;/nav&gt;\n</code></pre> <p></p> <pre><code>&lt;nav class=\"sidebar__nav nav-style__compact nav-style__simple\"&gt;\n    ...\n&lt;/nav&gt;\n</code></pre> <p></p> <pre><code>&lt;nav class=\"sidebar__nav nav-style__compact nav-style__rounded\"&gt;\n    ...\n&lt;/nav&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#accent-colors","title":"Accent colors","text":"<p>To use an accent color on active items, just add the class <code>.nav-accent-*</code> to <code>.sidebar__nav</code>. You can choose from the Bootstrap contextual colors and set your own. You don't need Bootstrap to choose these colors though since they are hard coded in Beets Layout.</p>"},{"location":"beets-layout/section/sidebar/#default_1","title":"Default","text":"<p>These are the built in accent colors you can choose from:</p> Class Color <code>.nav-accent-primary</code> Blue <code>.nav-accent-secondary</code> Gray <code>.nav-accent-success</code> Green <code>.nav-accent-warning</code> Yellow <code>.nav-accent-danger</code> Red <code>.nav-accent-info</code> Light blue <code>.nav-accent-light</code> Light gray <code>.nav-accent-dark</code> Dark gray <code>.nav-accent-beets</code> Crimson DefaultSimpleRoundedDefault submenuSimple submenuRounded submenu <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <pre><code>&lt;nav class=\"sidebar__nav nav-accent-primary\"&gt;\n    ...\n&lt;/nav&gt;\n</code></pre> <p>Tip</p> <p>You can set active submenu links to use the accent color when using the simple navigation style: See here</p>"},{"location":"beets-layout/section/sidebar/#custom","title":"Custom","text":"<p>To set your own custom access color you will have to use the source files and compile the scss. Change the scss variable <code>$nav-accent-custom-color</code> in the file beets-layout/_variables.scss and then use the class <code>.nav-accent</code>.</p> src/scss/beets-layout/_variables.scss<pre><code>$nav-accent-custom-color: #d63384;\n</code></pre> <pre><code>&lt;nav class=\"sidebar__nav nav-accent\"&gt;\n    ...\n&lt;/nav&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#submenus","title":"Submenus","text":"<p>You can add a one level submenu to your <code>.list-item</code>. When you click on the link, the submenu opens. When you click one of the submenu links, the submenu stays open. This can be achieved by adding <code>.open</code> to the <code>.list-item</code>, <code>.active</code> to the main <code>.nav-link</code> and the submenu <code>.nav-link</code>.</p> <p>You also has to add <code>.nav-link__submenu</code> to the main <code>.nav-link</code> to give it the arrow indicating that there is a submenu within.</p> <p>Give the main <code>.nav-link</code> an id (<code>id=\"submenu-id\"</code>) and add the JavaScript function: <code>onclick=\"toggleSubmenu('submenu-id')\"</code> to connect the to each other.</p> DefaultSimpleRoundedDefault compactSimple compactRounded compact <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <pre><code>&lt;nav class=\"sidebar__nav\"&gt;\n    &lt;ul class=\"nav-list\"&gt;\n        &lt;li class=\"list-item open\"&gt;\n            &lt;a href=\"#\" class=\"nav-link nav-link__submenu active\" id=\"link-1-submenu\" onclick=\"toggleSubmenu('link-1-submenu')\"&gt;\n                &lt;div class=\"nav-link-icon\"&gt;...&lt;/div&gt;\n                Link 1\n            &lt;/a&gt;\n            &lt;ul class=\"nav-list__submenu\"&gt;\n                &lt;li class=\"list-item\"&gt;&lt;a href=\"#\" class=\"nav-link active\"&gt;Link 1-1&lt;/a&gt;&lt;/li&gt;\n                &lt;li class=\"list-item\"&gt;&lt;a href=\"#\" class=\"nav-link\"&gt;Link 1-2&lt;/a&gt;&lt;/li&gt;\n                &lt;li class=\"list-item\"&gt;&lt;a href=\"#\" class=\"nav-link\"&gt;Link 1-3&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#colored-active-links","title":"Colored active links","text":"<p>If you are using the simple styling <code>.nav-style__simple</code> you can opt-in to have the active submenu links colored with the selected accent color. To do this, you add the class <code>.simple__colored-submenu</code> to <code>.sidebar__nav</code>. The links will then have a more similar look to the default navigation style.</p> <pre><code>&lt;nav class=\"sidebar__nav nav-style__simple simple__colored-submenu nav-accent-primary\"&gt;\n    ...\n&lt;/nav&gt;\n</code></pre>"},{"location":"beets-layout/section/sidebar/#footer","title":"Footer","text":"<p>The footer section can be used for various things like logged in user info, call to actions and callouts. Therefore it is not styled in any particular way, you must style it as you seem fit.</p> <pre><code>&lt;div class=\"sidebar__footer\"&gt;\n    ...\n&lt;/div&gt;\n</code></pre>"},{"location":"beets-php/","title":"","text":"<p>Beets PHP is a starter template for semi-advanced PHP projects containing an MVC filesystem, routing, autoloader, .env functionality, SCSS compiler, Browser-sync and more. It makes use of other great libraries for the core functionality so make sure you check them out, say thanks and cunsult their documentation!</p> <ul> <li>Bramus Router</li> <li>vlucas PHP dotenv</li> <li>BrowserSync</li> </ul>"},{"location":"beets-php/app-functions/","title":"App functions","text":"<p>The app functions are functions that comes natively with Beets PHP. The file is located in the <code>~/app/core/</code> folder and is loaded automatically via the autoloader.</p> <p>The <code>/includes</code> folder is used for lager functions or functions that belong together but does not need to be in a class.</p> ~/app/core/functions.php<pre><code>// Die-and-dump function\nrequire_once 'includes/dd.php';\n\n// Authentication functions\nrequire_once 'includes/auth.php';\n\n// Core functions\n\nfunction escape($input)\n{\n    ...\n}\n\nfunction view($pattern, $attributes = [])\n{\n    ...\n}\n\nfunction feedback()\n{\n    ...\n}\n\nfunction error($field)\n{\n    ...\n}\n\nfunction errorStyle($field)\n{\n    ...\n}\n\nfunction old($key, $default = '')\n{\n    ...\n}\n\nfunction hidden(string $name, string $value)\n{\n    ...\n}\n\nfunction method(string $requestMethod)\n{\n    ...\n}\n\nfunction csrf()\n{\n    ...\n}\n\nfunction storage(string $filename)\n{\n    ...\n}\n</code></pre>"},{"location":"beets-php/cheat-sheet/","title":"Cheat sheet","text":"<p>Quick access to some useful tools without extended explanation.</p>"},{"location":"beets-php/cheat-sheet/#database","title":"Database","text":""},{"location":"beets-php/cheat-sheet/#select","title":"Select","text":"<p>Multiple posts:</p> <pre><code>use App\\Core\\Database as DB;\n\n$sql = \"SELECT * FROM table\";\n$result = DB::query($sql)-&gt;fetchAll();\n</code></pre> <p>Single post:</p> <pre><code>$sql = \"SELECT * FROM table WHERE id = :id\";\n$result = DB::query($sql, ['id' =&gt; $id])-&gt;fetch();\n</code></pre> <p>Filter (MVC example):</p> UserController.php<pre><code>use App\\Models\\User;\n\n$users = User::get(\n    'where' =&gt; ['status = 1'],\n    'orderBy' =&gt; ['first_name ASC'],\n);\n\nreturn App::view('/users/index.php', [\n    'users' =&gt; $users\n]);\n</code></pre> User.php<pre><code>$orderClause = DB::orderBy(! empty($args['orderBy']) ? $args['orderBy'] : []);\n$whereClause = DB::where(! empty($args['where']) ? $args['where'] : []);\n\n$sql = \"SELECT first_name, last_name FROM users $whereClause $orderClause\";\n$result = DB::query($sql)-&gt;fetchAll();\n\nreturn $result ?: [];\n</code></pre> index.php<pre><code>print_r($users);\n</code></pre>"},{"location":"beets-php/cheat-sheet/#insert-into","title":"Insert into","text":"<pre><code>$sql = \"INSERT INTO table (col_1, col_2) VALUES (:val_1, :val_2)\";\n$result = DB::query($sql, ['val_1' =&gt; 'foo', 'val_2' =&gt; 'bar']);\n</code></pre>"},{"location":"beets-php/cheat-sheet/#update","title":"Update","text":"<pre><code>$sql = \"UPDATE table SET col_1 = :val_1, col_2 = :val_2 WHERE id = :id\";\n$result = DB::query($sql, ['val_1' =&gt; 'foo', 'val_2' =&gt; 'bar', 'id' =&gt; 123]);\n</code></pre>"},{"location":"beets-php/cheat-sheet/#delete","title":"Delete","text":"<pre><code>$sql = \"DELETE FROM table WHERE id = :id\";\n$result = DB::query($sql, ['id' =&gt; 123]);\n</code></pre>"},{"location":"beets-php/cheat-sheet/#forms","title":"Forms","text":""},{"location":"beets-php/cheat-sheet/#csrf","title":"CSRF","text":"<p>Create and validate token (in controller):</p> <pre><code>use App\\Core\\CSRF;\n\n// Create new token before form load\nCSRF::newToken();\n\n// Validate after form submit [bool]\nCSRF::validate()\n</code></pre> <p>Create hidden form field (in view):</p> <pre><code>&lt;?= csrf() ?&gt;\n</code></pre>"},{"location":"beets-php/cheat-sheet/#validation","title":"Validation","text":"<p>Validate a form input (in model):</p> <pre><code>use App\\Http\\Form;\n\n$Form = new Form();\n\n// Validate an input\n$Form-&gt;validate('input_name', $_POST['input_name'])-&gt;required();\n\n// Check for errors/validation fails\nif (! $Form-&gt;errors()) {\n    // No errors, save to db\n    ...\n}\n\n// Flash errors to session\n$Form-&gt;flashErrors();\n\n// Flash old data to session\n$Form-&gt;flashOld([\n    'input_name' =&gt; $_POST['input_name']\n]);\n</code></pre> <p>Echo the errors and style the input (in view) if there are any:</p> <pre><code>&lt;input \n    type=\"text\" \n    class=\"&lt;?= errorStyle('input_name') ?&gt;\" \n    name=\"input_name\"\n&gt;\n&lt;?= error('input_name') ?&gt;\n</code></pre> <p>Validation methods and their parameters:</p> <pre><code>alpha(['error'])\nalphaNumeric(['error'])\nemail(['error'])\nisFilled()\nlength(['allowEmpty', 'error', 'errorMin', 'errorMax'])\nlengthMax(['error'])\nlengthMin(['error'])\nmatching(['error'])\nname(['error', 'max', 'min'])\nnumeric(['error'])\npassword(['error', 'max', 'min'])\nregex(['error'])\nrequired(['error'])\nunique(['error', 'ignore'])\n</code></pre>"},{"location":"beets-php/cheat-sheet/#feedback","title":"Feedback","text":"<pre><code>use App\\Http\\Feedback;\n\n// Set feedback name\nFeedback::set('save_success');\n\n// Create the component\nFeedback::create('save_success')-&gt;toast([\n    'text' =&gt;, 'The post was saved',\n    'style' =&gt;, 'success',\n    'icon' =&gt;, 'fa-solid fa-check-circle'\n]);\n\n// Run the feedback message\nFeedback::run();\n</code></pre> <p>Feedback types and their properties:</p> <pre><code>alert(['text', 'style', 'icon'])\ntoast(['text', 'style', 'icon', 'offset-y'])\ntoast(['text', 'style', 'icon', 'disableIcon', 'bootstrapIcon'])\n</code></pre> <p>Echo out the feedback component (in view) if there is one:</p> <pre><code>&lt;?= feedback() ?&gt;\n</code></pre>"},{"location":"beets-php/cheat-sheet/#redirecting","title":"Redirecting","text":"<pre><code>use App\\Core\\Redirect;\n\nRedirect::to('/page');\n</code></pre>"},{"location":"beets-php/cheat-sheet/#with-flash-message","title":"With flash message","text":"<pre><code>Redirect::to('/page')-&gt;with('message', 'This is a message');\n\nSession::get('message'); // This is a message\n</code></pre>"},{"location":"beets-php/cheat-sheet/#sessions","title":"Sessions","text":"<p>Flash messages (<code>flash()</code>) are deleted after every page reload. Regular session values (<code>put()</code>) are deleted at logout.</p> <pre><code>use App\\Core\\Session;\n\nSession::flash('message', 'Hello World'); \n\n// $_SESSION['_flash']['message'] = \"Hello World\"\n\nSession::put('name', 'Dwight');\n\n// $_SESSION['name'] = \"Dwight\"\n</code></pre> <p>Get the values:</p> <pre><code>echo Session::get('message'); // Hello World\necho Session::get('name'); // Dwight\n</code></pre> <p>Check if key exists:</p> <pre><code>Session::has('message'); // true\nSession::has('name'); // true\n</code></pre> <p>Empty the session:</p> <pre><code>Session::flush(); // Empty the whole session\nSession::flush('name') // Empty only the key \"name\"\n\nSession::destroy(); // Destroy the session\n</code></pre>"},{"location":"beets-php/csrf-protection/","title":"CSRF Protection","text":"<p>With Beets PHP you get a simple CSRF (Cross Site Request Forgery) protection class. This class is yet pretty basic, so you might want to take extra security measurements, but it's a start nevertheless!</p>"},{"location":"beets-php/csrf-protection/#csrfphp","title":"CSRF.php","text":"Location<pre><code>~/app/core/CSRF.php\n</code></pre> Namespace<pre><code>namespace App\\Core;\n</code></pre> Import<pre><code>use App\\Core\\CSRF;\n</code></pre>"},{"location":"beets-php/csrf-protection/#how-to-use-the-csrf-protection","title":"How to use the CSRF protection","text":"<p>The Beets CSRF protection will create a new token when a page with a form loads. This can be done in the controller before the view is returned. We can then add a hidden form field using the <code>csrf()</code> helper function. When the form is submitted we can check the submitted value against what we are expecting it to be (the token that we created when we loaded the page).</p>"},{"location":"beets-php/csrf-protection/#create-a-new-token","title":"Create a new token","text":"<p>To create a new CSRF token we run:</p> <pre><code>use App\\Core\\CSRF;\n\nCSRF::newToken();\n</code></pre> <p>The new token is then saved to the session (<code>$_SESSION['_csrf']</code>) and hashed with a secret key that is known only to the server. The hashed version of the token is then stored as a private property inside the CSRF object. This property is used later when we want to do the validation.</p>"},{"location":"beets-php/csrf-protection/#the-csrf-form-helper-function","title":"The csrf() form helper function","text":"<p>The <code>csrf()</code> helper function is used to populate a <code>&lt;form&gt;</code> tag with the field that passes along the CSRF token.</p> <pre><code>&lt;form method=\"POST\" name=\"my-form\" id=\"myForm\"&gt;\n    &lt;?= csrf() ?&gt;\n    ...\n&lt;/form&gt;\n</code></pre> <p>Output:</p> <pre><code>&lt;form method=\"POST\" name=\"my-form\" id=\"myForm\"&gt;\n    &lt;input type=\"hidden\" name=\"_csrf\" value=\"545001ecfe2a9487bdb3a30534ebcaf9fa72456305863cb2aa3a09afaa6ce524\"&gt;\n    ...\n&lt;/form&gt;\n</code></pre>"},{"location":"beets-php/csrf-protection/#validate-a-submitted-token","title":"Validate a submitted token","text":"<p>To validate the form after submition we use the <code>CSRF::validate()</code> method. The method will grab the <code>$_POST['_csrf']</code> field value and compare it with the expected hashed value. The expected value is created by hashing the token that was created for the form when it was loaded with the secret key that is only known to the server.</p> <p>The method will return a boolean of <code>true</code> if the tokens match and <code>false</code> if they don't. Use this in the controller to either show an error page or redirect the user to somewhare.</p> <p>You should log any attempt to access a page with an invalid CSRF token!</p> <pre><code>// Update post\npublic static function update(int $postId)\n{\n    if (! CSRF::validate()) {\n        App::abort(405);\n    }\n\n    // Update post\n\n    // Redirect\n}\n</code></pre> <p>The code will only be aborted if the validation fails.</p>"},{"location":"beets-php/custom-functions/","title":"Custom functions","text":"<p>If you want to add our own custom functions you can use the file <code>functions.php</code> that is located in the <code>~/app/helpers/</code> folder. We separate the core app functions and the custom user functions for safety reasons.</p> <p>This file is automatically included via the autoloader.</p>"},{"location":"beets-php/custom-functions/#examples","title":"Examples","text":"<p>Below are some examples of functions that you might want to put here.</p>"},{"location":"beets-php/custom-functions/#access-array-in-dataphp","title":"Access array in data.php","text":"<p>If you have added an array with static data that should be used across the app, you might want to build a function to easily access it:</p> ~/config/data.php<pre><code>$lookup = [\n    0 =&gt; 'zero',\n    1 =&gt; 'one',\n    2 =&gt; 'two'\n];\n</code></pre> ~/app/helpers/functions.php<pre><code>function lookup($input = null)\n{\n    require APP_ROOT . '/config/data.php';\n\n    return $lookupTable[$input] ?: \"No input submitted\";\n}\n</code></pre> <pre><code>echo lookup(1); // one\necho lookup(); // No input submitted\n</code></pre>"},{"location":"beets-php/custom-functions/#convert-checkbox-state","title":"Convert checkbox state","text":"~/app/helpers/functions.php<pre><code>function checkboxState($input)\n{\n    return $input === 1 ? \"checked\" : null;\n}\n</code></pre> <pre><code>$state = checboxState(1); // Value 1 can come from a db\n\necho \"&lt;input type=\\\"checkbox\\\" $state&gt;\"; // &lt;input type=\"checkbox checked\"&gt;\n</code></pre>"},{"location":"beets-php/database/","title":"Database workflow","text":"<p>Beets PHP contains several tools for you to easily work with your database. On this page you will learn how to setup and connect to the tadabase ase well as basic CRUD functionallity.</p>"},{"location":"beets-php/database/#databasephp","title":"Database.php","text":"Location<pre><code>~/app/core/Database.php\n</code></pre> Namespace<pre><code>namespace App\\Core;\n</code></pre> Import<pre><code>use App\\Core\\Database as DB;\n</code></pre>"},{"location":"beets-php/database/#configure-the-connection","title":"Configure the connection","text":"<p>To be able to connect to the datbase you will have to add your credentials to the .env file. You will get this information from your hosting service. </p> <p>If you are using the local database you can set <code>DB_DATABASE=</code> to your database name, <code>DB_USENAME=root</code> and <code>DB_PASSWORD=</code> to be empty like the example below.</p> ~/.env<pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=dbname\nDB_CHARSET=utf8mb4\nDB_USERNAME=username\nDB_PASSWORD=\n</code></pre>"},{"location":"beets-php/database/#connect-to-the-database","title":"Connect to the database","text":"<p>By importing Database.php with <code>use App\\Core\\Database</code> you get access to all database functionality. The connection is initiated in the <code>__construct()</code> which retrieves the credentials from the .env file and uses them to set up a new PDO object.</p> <pre><code>use App\\Core\\Database as DB;\n\nDB::query($sql)-&gt;fetchAll();\n</code></pre>"},{"location":"beets-php/database/#database-methods","title":"Database methods","text":"<p>Beets PHP comes with a couple of handy tools for the most commonly used operations but feel free to add your own methods that fits your needs.</p>"},{"location":"beets-php/database/#query","title":"query()","text":"<p>The <code>query()</code> method will combine your SQL query with the attributes for your prepared statements and then execute the operation.</p> <pre><code>$sql = \"SELECT * FROM users\";\n$result = DB::query($sql)-&gt;fetchAll();\n\n$sql = \"INSERT INTO users (first_name, last_name) VALUES (?, ?)\"\n$result = DB::query($sql, ['Jim', 'Halpert']);\n\n$sql = \"INSERT INTO users (first_name, last_name) VALUES (:first, :last)\"\n$result = DB::query($sql, ['first' =&gt; 'Jim', 'last' =&gt; 'Halpert']);\n</code></pre>"},{"location":"beets-php/database/#where","title":"where()","text":"<p>The <code>where()</code> method will create a string that can be used in your SQL query to build your simple filter. The arguments are passed as an array.</p> <p>The default string will be passed if no arguments are provided. This string is supposed to show every row in the table.</p> <pre><code>$where = DB::where(['status = 1']);\n$where = DB::where(['status = 1', 'AND category = 2']);\n\n$where = DB::where();\n</code></pre> <p>Output:</p> <pre><code>WHERE status = 1\nWHERE status = 1 AND category = 2\n\nWHERE id IS NOT NULL\n</code></pre>"},{"location":"beets-php/database/#orderby","title":"orderBy()","text":"<p>The <code>orderBy()</code> method will create a string that can be used in your SQL query to build your simple filter. The arguments are passed as an array.</p> <p>The default string will be passed if no arguments are provided. This string is supposed to sort the results by oldest first.</p> <pre><code>$where = DB::orderBy(['first_name ASC']); // WHERE column_a = 1\n$where = DB::orderBy(['first_name ASC', 'id ASC']); // WHERE column_a = 1 AND column_b = 2\n\n$where = DB::orderBy();\n</code></pre> <p>Output:</p> <pre><code>ORDER BY first_name ASC\nORDER BY first_name ASC, id ASC\n\nORDER BY id ASC\n</code></pre>"},{"location":"beets-php/database/#usage","title":"Usage","text":"<p>Here you can find some common use cases for the database in a CRUD application. In the examples below we assume that you are using a RESTful approach with the MVC file system that comes with Beets PHP.</p> <p>We will use the controller <code>UserController.php</code> to call the model <code>User.php</code> to get, insert, update or delete data.</p> <p>It is by using this approach the <code>where()</code> and <code>orderBy()</code> methods comes in handy!</p>"},{"location":"beets-php/database/#get-multiple-posts-from-db","title":"Get multiple posts from db","text":"<pre><code>use App\\Core\\Database as DB;\n\n$sql = \"SELECT * FROM table\";\n$result = DB::query($sql)-&gt;fetchAll();\n</code></pre> <p>Here we will get the names of all users in the users table with the status of 1 and order them by their first name. The query will use the PDO method <code>fetchAll()</code> to genereate an array of results.</p> UserController.php<pre><code>namespace App\\Http\\Controllers;\n\nuse App\\Core\\App;\nuse App\\Models\\User;\n\nclass UserController\n{\n    public static function index()\n    {\n        // Get the users data\n        $users = User::get(\n            'where' =&gt; ['status = 1'],\n            'orderBy' =&gt; ['first_name ASC'],\n        );\n\n        // Return the view with the users data\n        return App::view('/users/index.php', [\n            'users' =&gt; $users\n        ]);\n    }\n}\n</code></pre> User.php<pre><code>namespace App\\Models;\n\nuse App\\Core\\Database as DB;\n\nclass User\n{\n    public static function get(array $args = []): array\n    {\n        // Build the where and order clauses\n        $orderClause = DB::orderBy(! empty($args['orderBy']) ? $args['orderBy'] : []);\n        $whereClause = DB::where(! empty($args['where']) ? $args['where'] : []);\n\n        $sql = \"SELECT first_name, last_name FROM users $whereClause $orderClause\";\n        // Execute the query and store the result in $result\n        $result = DB::query($sql)-&gt;fetchAll();\n\n        return $result ?: [];\n    }\n}\n</code></pre> index.php<pre><code>// print the array with the users data\nprint_r($users);\n</code></pre>"},{"location":"beets-php/database/#get-single-post-from-db","title":"Get single post from db","text":"<pre><code>use App\\Core\\Database as DB;\n\n$sql = \"SELECT * FROM table WHERE id = ?\";\n$params = [$userId];\n$result = DB::query($sql, $params)-&gt;fetch();\n</code></pre> <p>Here we will get the names of all users in the users table with the status of 1 and order them by their first name. The query will use the PDO method <code>fetch()</code> to get a single item as an array.</p> <p>We will use a User method called <code>findOrFail()</code> that will return a 404 error page if the database doesn't return a result, like if a faulty user id was put in the URL. If you do not want to abort if there is no result, you can just use the <code>find()</code> method.</p> UserController.php<pre><code>namespace App\\Http\\Controllers;\n\nuse App\\Core\\App;\nuse App\\Models\\User;\n\nclass UserController\n{\n    public static function show(int $userId)\n    {\n        // Get the user data\n        $user = User::findOrFail($userId);\n\n        // Return the view with the user data\n        return App::view('/users/show.php', [\n            'user' =&gt; $user\n        ]);\n    }\n}\n</code></pre> User.php<pre><code>namespace App\\Models;\n\nuse App\\Core\\App;\nuse App\\Core\\Database as DB;\n\nclass User\n{\n    public static function find(int $id): array\n    {\n        $sql = \"SELECT first_name, last_name FROM users WHERE id = :id\";        \n        // Execute and store the result in $result\n        $result = DB::query($sql, ['id' =&gt; $id])-&gt;fetch();\n\n        return $result ?: [];\n    }\n\n    public static function findOrFail(int $id): mixed\n    {\n        $result = static::find($id);\n\n        if (! $result) {\n            App::abort();\n        }\n\n        return $result;\n    }\n}\n</code></pre> show.php<pre><code>// print the array with the user data\nprint_r($user);\n</code></pre>"},{"location":"beets-php/database/#add-post-to-db","title":"Add post to db","text":"<pre><code>use App\\Core\\Databas as DB;\n\n$sql = \"INSERT INTO table (col_1, col_2) VALUES (?, ?)\";\n$result = DB::query($sql, ['foo', 'bar']);\n</code></pre> <p>Here we will add a new user to the users table. The values for <code>firstName</code> and <code>lastName</code> is assumed to come from a form and as retrieved from the <code>$_POST</code> super global. </p> <p>Please note that we are not covering the validation functionality in this example. The validation errors and input values are stored as flash messages to be used in case of errors to show what part of the validation failed.</p> UserController.php<pre><code>namespace App\\Http\\Controllers;\n\nuse App\\Core\\Redirect;\nuse App\\Models\\User;\n\nclass UserController\n{\n    public static function store()\n    {\n        // Try to store the user in the database.\n        // If not successfull, redirect back to the form\n        // and show an error message.\n        if (! User::store($_POST)) {\n            Redirect::to(\"/users/create\")-&gt;with(\"message\", \"Error\");\n        }\n\n        // If the store was successful, redirect\n        Redirect::to(\"/users\")-&gt;with(\"message\", \"Success\");\n    }\n}\n</code></pre> User.php<pre><code>namespace App\\Models;\n\nuse App\\Http\\Form;\nuse App\\Core\\Database as DB;\nuse App\\Core\\Session;\n\nclass User\n{\n    public static function store(array $formData): bool\n    {\n        // Collect the input data\n        $firstName = escape($formData['first_name']);\n        $lastName = escape($formData['last_name']);\n\n        // Validate the data\n        $Form = new Form();     \n        $Form-&gt;validate('first_name', $firstName)-&gt;name();\n        $Form-&gt;validate('last_name', $lastName)-&gt;name();\n\n        // Store the data if there are no errors\n        if (! $Form-&gt;errors()) {\n            $sql = \"INSERT INTO users (first_name, last_name) VALUES (:firstName, :lastName)\";\n            // Execute\n            DB::query($sql, [\n                'firstName' =&gt; $firstName,\n                'lastName' =&gt; $lastName\n            ]);\n        }\n\n        // Flash validation errors and input values\n        Session::flash('errors', $Form-&gt;errors());\n        Session::flash('old', [\n            'first_name' =&gt; $firstName,\n            'last_name' =&gt; $lastName\n        ]);\n\n        // Return true (no errors) or false (has errors)\n        return empty($Form-&gt;errors());\n    }\n}\n</code></pre>"},{"location":"beets-php/database/#update-post-in-db","title":"Update post in db","text":"<pre><code>use App\\Core\\Databas as DB;\n\n$sql = \"UPDATE table SET col_1 = ?, col_2 = ? WHERE id = ?\";\n$result = DB::query($sql, ['foo', 'bar', 123]);\n</code></pre> <p>Here we will update the user with id of <code>$userId</code> in the users table. The values for <code>firstName</code> and <code>lastName</code> is assumed to come from a form and as retrieved from the <code>$_POST</code> super global. The <code>$userId</code> comes from the router file.</p> <p>Please note that we are not covering the validation functionality in this example. The validation errors and input values are stored as flash messages to be used in case of errors to show what part of the validation failed.</p> UserController.php<pre><code>namespace App\\Http\\Controllers;\n\nuse App\\Core\\Redirect;\nuse App\\Models\\User;\n\nclass UserController\n{\n    public static function update(int $userId)\n    {\n        // Try to update the user in the database.\n        // If not successfull, redirect back to the form\n        // and show an error message.\n        if (! User::update($_POST, $userId)) {\n            Redirect::to(\"/users/$userId/edit\")-&gt;with(\"message\", \"Error\");\n        }\n\n        // If the store was successful, redirect\n        Redirect::to(\"/users/$userId\")-&gt;with(\"message\", \"Success\");\n    }\n}\n</code></pre> User.php<pre><code>namespace App\\Models;\n\nuse App\\Http\\Form;\nuse App\\Core\\Database as DB;\nuse App\\Core\\Session;\n\nclass User\n{\n    public static function update(array $formData, int $userId): bool\n    {\n        // Collect the input data\n        $firstName = escape($formData['first_name']);\n        $lastName = escape($formData['last_name']);\n\n        // Validate the data\n        $Form = new Form();     \n        $Form-&gt;validate('first_name', $firstName)-&gt;name();\n        $Form-&gt;validate('last_name', $lastName)-&gt;name();\n\n        // Store the data if there are no errors\n        if (! $Form-&gt;errors()) {\n            $sql = \"UPDATE users  SET first_name = :firstName, last_name = :lastName WHERE id = :id\";\n            // Execute\n            DB::query($sql, [\n                'firstName' =&gt; $firstName,\n                'lastName' =&gt; $lastName,\n                'id' =&gt; $userId\n            ]);\n        }\n\n        // Flash validation errors and input values\n        Session::flash('errors', $Form-&gt;errors());\n        Session::flash('old', [\n            'first_name' =&gt; $firstName,\n            'last_name' =&gt; $lastName\n        ]);\n\n        // Return true (no errors) or false (has errors)\n        return empty($Form-&gt;errors());\n    }\n}\n</code></pre>"},{"location":"beets-php/database/#delete-post-from-db","title":"Delete post from db","text":"<pre><code>use App\\Core\\Databas as DB;\n\n$sql = \"DELETE FROM table WHERE id = ?\";\n$result = DB::query($sql, [123]);\n</code></pre> <p>Here we will delete the user with id of <code>$userId</code> from the users table. The <code>$userId</code> comes from the router file.</p> UserController.php<pre><code>namespace App\\Http\\Controllers;\n\nuse App\\Core\\Redirect;\nuse App\\Models\\User;\n\nclass UserController\n{\n    public static function destroy(int $userId)\n    {\n        // Delete the user\n        User::destroy($userId);\n\n        // Redirect\n        Redirect::to(\"/users\")-&gt;with(\"message\", \"Success\");\n    }\n}\n</code></pre> User.php<pre><code>namespace App\\Models;\n\nuse App\\Core\\Database as DB;\n\nclass User\n{\n    public static function destroy(int $userId): bool\n    {\n        $sql = \"DELETE FROM \" . static::DB_TABLE . \" WHERE id = :id\";\n        // Execute\n        DB::query($sql, ['id' =&gt; $userId]);\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"beets-php/feedback-messages/","title":"Feedback messages","text":"<p>The Error class handles incomming error messages and stores them in an array.</p>"},{"location":"beets-php/feedback-messages/#feedbackphp","title":"Feedback.php","text":"Location<pre><code>~/app/http/Feedback.php\n</code></pre> Namespace<pre><code>namespace App\\Http;\n</code></pre> Import<pre><code>use App\\Http\\Feedback;\n</code></pre>"},{"location":"beets-php/feedback-messages/#how-feedbacks-work","title":"How feedbacks work","text":"<p>Feedbacks are not essential to Beets PHP and can be configures as you wish. The class gives you an easy way of creating \"components\" like alerts and toasts. They are built for use with the Bootstrap framework but can easily be changed into Tailwind CSS or anything else.</p> <p>When you have executed some code, perhaps saved something to the database, you can set a feedback name. When you load the next page you can create a component and then run it to show it.</p> Example<pre><code>use App\\Http\\Feedback;\n\n// Set feedback name\nFeedback::set('save_success');\n\n// Create the component\nFeedback::create('save_success')-&gt;toast([\n    'text' =&gt;, 'The post was saved',\n    'style' =&gt;, 'success',\n    'icon' =&gt;, 'fa-solid fa-check-circle'\n]);\n\n// Run the feedback message\nFeedback::run();\n</code></pre>"},{"location":"beets-php/feedback-messages/#create-a-component","title":"Create a component","text":"<p>To create a component you first have to announce that something has happened, like <code>'save_success'</code>. You do this by setting a name. This will save the name to the session (<code>$_SESSION['feedback']</code>) so that it can be recieved on another page.</p> <pre><code>Feedback::set('save_success');\n</code></pre> <p>You can build a feedback component when you are ready to show it. This can be done in a view but the best place is in a controller before returning the view.</p> <p>By building the component you are inserting information that will be presented in the selected feedback type. </p> <p>The <code>for()</code> method will check if the name for the component you are building is in the session. If it is, the component will be built.</p> <pre><code>Feedback::for('save_success')-&gt;toast();\n</code></pre>"},{"location":"beets-php/feedback-messages/#feedback-types","title":"Feedback types","text":"<p>Two feedback types are included by default and they are both Bootstrap components. By inserting a message, style and icon you can decide how the message will look.</p> Properties example<pre><code>[\n    'text' =&gt; \"The post was saved!\" // (string) The message\n    'style' =&gt; \"success\" // (string) Bootstrap contextual class\n    'icon' =&gt; \"fa-solid fa-check\" // (string) Fontawesome icon\n\n    'offset-y' =&gt; \"58px\" // (string) Y-axis offset, only for toast\n]\n</code></pre>"},{"location":"beets-php/feedback-messages/#alert","title":"Alert","text":"<p>The alert will fill the page width depending on where in you HTML you place <code>Feedback::run()</code>. It will not close automaticlly.</p> <p>Read more about Bootstrap alerts</p> <p></p> <pre><code>Feedback::for('save_success')-&gt;alert([\n    'text' =&gt; \"The post was saved!\",\n    'style' =&gt; \"success\",\n    'icon' =&gt; \"fa-solid fa-check\"\n]);\n</code></pre>"},{"location":"beets-php/feedback-messages/#toast","title":"Toast","text":"<p>The toast is shown at the top right corner of your screen. This can me modified within the Feedback class. The toast will disappear after 5 seconds.</p> <p>Read more about Bootstrap toasts.</p> <p></p> <pre><code>Feedback::for('save_success')-&gt;toast([\n    'text' =&gt; \"The post was saved!\",\n    'style' =&gt; \"success\",\n    'icon' =&gt; \"fa-solid fa-check\"\n]);\n</code></pre>"},{"location":"beets-php/feedback-messages/#callout","title":"Callout","text":"<p>The callout will fill the page width depending on where in you HTML you place <code>Feedback::run()</code>. You can disable the default icon or use Boostrap icons istead of the default Fontawesome ones.</p> <p>Read more about Beets callouts.</p> <p></p> <pre><code>Feedback::for('save_success')-&gt;callout([\n    'text' =&gt; \"The post was saved!\",\n    'style' =&gt; \"success\",\n\n    'disableIcon' =&gt; false,\n    'boostrapIcon' =&gt; false\n]);\n</code></pre>"},{"location":"beets-php/feedback-messages/#run-the-feedback","title":"Run the feedback","text":"<p>When the component is created it's time to run it. You can either run it when creating it or later in your code depending on your needs. The <code>run()</code> method will <code>echo</code> out the component.</p> <p><pre><code>Feedback::for('save_success')-&gt;toast(...)-&gt;run();\n</code></pre> <pre><code>Feedback::for('save_success')-&gt;toast(...);\n\nFeedback::run();\n</code></pre></p>"},{"location":"beets-php/feedback-messages/#feedback-helper-function","title":"Feedback helper function","text":"<p>The <code>feedback()</code> helper function is used to execute (or run) a feedback component in a view. This makes the code in the view shorter and you con't have to includ the feedback class.</p> <pre><code>&lt;?= feedback() ?&gt;\n</code></pre> <p>Equals to:</p> <pre><code>use App\\Http\\Feedback;\n\nFeedback::run();\n</code></pre>"},{"location":"beets-php/form-functions/","title":"Form functions","text":"<p>There are a couple of helper functions for forms. You can read about them on this page.</p>"},{"location":"beets-php/form-functions/#form-method","title":"Form method","text":"<p>The HTML protocol can only send and recieve POST and GET request methods from a <code>&lt;form&gt;</code> tag. Our RESTful framework makes use of the PATCH and DELETE methods so we can use the <code>method()</code> helper function to make this work.</p> <p>The <code>method()</code> function is located in the application functions file <code>~/app/core/functions.php</code>.</p> <p>The <code>method()</code> function will return an input field with the necessary properties as well as the request method of your chosing. When the router then runs the request it will look for a <code>$_POST['_method']</code> and use that as the request method instead of POST that was really sent.</p> <pre><code>echo method('PATCH');\n</code></pre> <p>Output:</p> <pre><code>&lt;input type=\"hidden\" name=\"_method\" value=\"PATCH\"&gt;\n</code></pre> <p>In a form inside a view it might look something like this:</p> <pre><code>&lt;form method=\"POST\" name=\"my-form\" id=\"myForm\"&gt;\n    &lt;?= method('PATCH') ?&gt;\n    &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n    &lt;input type=\"text\" name=\"name\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"beets-php/form-functions/#hidden-field","title":"Hidden field","text":"<p>The <code>hidden()</code> function creates a hidden field with a name and a value. It is located in the application functions file <code>~/app/core/functions.php</code>.</p> <pre><code>echo hidden('secret', 'secretValue');\n</code></pre> <p>Output:</p> <pre><code>&lt;input type=\"hidden\" name=\"secret\" value=\"secretValue\"&gt;\n</code></pre> <p>In a form inside a view it might look something like this:</p> <pre><code>&lt;form method=\"POST\" name=\"my-form\" id=\"myForm\"&gt;\n    &lt;?= hidden('secret', 'secretValue') ?&gt;\n    &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n    &lt;input type=\"text\" name=\"name\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"beets-php/form-validation/","title":"Form validation","text":"<p>Beets PHP has a class with methods for form validation. Access them by importing the Form.php class.</p>"},{"location":"beets-php/form-validation/#formphp","title":"Form.php","text":"Location<pre><code>~/app/core/Form.php\n</code></pre> Namespace<pre><code>namespace App\\Core;\n</code></pre> Import<pre><code>use App\\Core\\Form;\n</code></pre>"},{"location":"beets-php/form-validation/#how-validation-works","title":"How validation works","text":"<p>You can validate submitted form data before updating your database. If the validation fails, an error message is stored in an array. </p> <p>You can check if the array contains values and in that case prevent the database query to execute and instead return to the form and show the error messages. The process can look something like this:</p> Example<pre><code>use App\\Core\\Database as DB;\nuse App\\Core\\Redirect;\nuse App\\Core\\Session;\nuse App\\Http\\Form;\n\n// Retrieve and sanitize the inputs\n$name = escape($_POST['input_name']);\n$email = escape($_POST['input_email']);\n\n// Validate the inputs\n$Form = new Form();\n$Form-&gt;validate('input_name', $name)-&gt;name()-&gt;required();\n$Form-&gt;validate('input_email', $email)\n    -&gt;email([\n        'error' =&gt; \"That's not an email address, that's a pickle!\"\n    ])\n    -&gt;unique('email', 'users')\n    -&gt;required();\n\n// Check for errors\nif (! $Form-&gt;errors()) {\n    $sql = \"INSERT INTO users (name, email) VALUES (?, ?)\";\n    $result = DB::query($sql, [$name, $email]);\n\n    Redirect::to('path');\n\n} else {\n    // Flash errors and old values to the session\n    $Form-&gt;flashErrors();\n\n    Session::flash('old', [\n        'name' =&gt; $name,\n        'email' =&gt; $email\n    ]);\n\n    Redirect::to('/back-to-form');\n}\n</code></pre>"},{"location":"beets-php/form-validation/#initiate-validation","title":"Initiate validation","text":""},{"location":"beets-php/form-validation/#validate","title":"validate()","text":"<p>The <code>validate()</code> method sets the <code>$field</code> and <code>$value</code> properties that are used with the validation methods as well as storing the value length as <code>$valueLength</code>.</p> validate()<pre><code>private $field;\nprivate $value;\nprivate $valueLength;\n\npublic function validate(string $field, $value): object\n{\n    ...\n}\n</code></pre> <ul> <li><code>$field</code> is used when generating an error message so that you can assign the correct error message to the corresponding form input. </li> <li><code>$value</code> is stored so that the cascading methods like <code>required()</code>, <code>name()</code> and others can use it to validate it.</li> <li><code>$valueLength</code> is the length of <code>$value</code> (\"hello\" = 5).</li> </ul> <p>Example<pre><code>&lt;form&gt;\n    &lt;input type=\"text\" name=\"input_field\" value=\"\"&gt;\n&lt;/form&gt;\n</code></pre> Example<pre><code>use App\\Http\\Form;\n\n$input = escape($_POST['input_field']); // \"\"\n\n$Form = new Form();\n\n$Form-&gt;validate('input_field', $input)-&gt;required();\n\n// Fail (input_filed is required but $input is empty)\n</code></pre></p>"},{"location":"beets-php/form-validation/#error-messages","title":"Error messages","text":"<p>When a validation fails, an error message is created. The error message is put in an <code>$errors</code> array and can be accessed so that the user can get feedback on what data was not submitted correctly.</p>"},{"location":"beets-php/form-validation/#set-a-message","title":"Set a message","text":"<p>Use the <code>error()</code> method to set an error message and store it in the errors array.</p> <pre><code>public function error(string $label, $key, $value): object\n{\n    ...\n}\n</code></pre> <ul> <li><code>$label</code> is the identifier of the message, like the name of the form field that was validated.</li> <li><code>$key</code> is the name of the validation that was performed.</li> <li><code>$value</code> is the error message.</li> </ul> Example<pre><code>$string = \"Assistant to the Manager\";\n\nif (mb_strlen($string) &gt; 5) {\n    $Form-&gt;error('input_field', 'titleCheck', \"Too long title\");\n}\n</code></pre>"},{"location":"beets-php/form-validation/#get-the-messages","title":"Get the messages","text":"<p>Use the <code>errors()</code> method to get the whole errors array. If you only want a specific label, you can pass it as an argument.</p> <pre><code>public function errors($label = null): array\n{\n    ...\n}\n</code></pre> Example<pre><code>$Form-&gt;validate('input_field', \"\")-&gt;required();\n\nprint_r($Form-&gt;errors());\n\n// Output:\n[\n    [\"input_field\"] =&gt; [\n        [\"titleCheck\"] =&gt; \"Too long title\"\n    ]\n]\n\nprint_r($Form-&gt;errors('input_field'));\n\n// Output:\n[\n    [\"titleCheck\"] =&gt; \"Too long title\"\n]\n\necho $Form-&gt;errors('input_field')['titleCheck']; \n\n// Output:\nToo long title\n</code></pre> <p>The array can hold many labels (\"input_field\"), but each label can only hold the latest validadion error. </p> <p>Example: if you validate a field that can only be alpha characters and max 10 characters long, but is submitted 20 characters long and containing characters like \"&amp;!#\", then only the last check will be stored. If that was the length error, the characters error will be shown if the length is shortened.</p>"},{"location":"beets-php/form-validation/#flash-errors","title":"Flash errors","text":"<p>The Form class has a method for flashing the error messages to the session, like a shortcut for <code>Session::flash()</code>.</p> <pre><code>public function flashErrors(): void\n{\n    ...\n}\n</code></pre> Example<pre><code>$Form-&gt;flashErrors();\n</code></pre>"},{"location":"beets-php/form-validation/#validation-methods","title":"Validation methods","text":"<p>To make a validation you can cascade any validation method (below) to the <code>validate()</code> method. </p> <p>Most of the methods generate an error message if the validation fails. The error message can be overridden for any method using the paramaters array should you wish to change it. </p> <p>Some methods also has other parameters that can be set, such as min and max values. Refer to each method for which parameters are available.</p> <p>This is an example of how you set the parameters:</p> Example<pre><code>$Form-&gt;validate('input_field', $input)-&gt;required([\n    'error' =&gt; \"This is a custom error message\"\n]);\n\n$Form-&gt;validate('input_field', $input)-&gt;name([\n    'min' =&gt; 1,\n    'max' =&gt; 50\n]);\n</code></pre>"},{"location":"beets-php/form-validation/#alpha","title":"Alpha","text":"<p>Check if <code>$value</code> only contains alphabetic characters (a-z, A-Z).</p> <pre><code>public function alpha(array $params = []): object\n{\n    ...\n}\n</code></pre> Example<pre><code>$Form-&gt;validate(\"input_field\", \"Darryl\")-&gt;alpha();\n\n// Pass\n</code></pre> Parameters<pre><code>[\n    'error' =&gt; \"Only alphabetic characters (a-z, A-Z) allowed\" // (string)\n]\n</code></pre>"},{"location":"beets-php/form-validation/#alpha-numeric","title":"Alpha Numeric","text":"<p>Check if <code>$value</code> ony contains alpha (a-z, A-Z) or numeric (0-9) characters.</p> <pre><code>public function alphaNumeric(array $params = []): object\n{\n    ...\n}\n</code></pre> Example<pre><code>$Form-&gt;validate(\"input_field\", \"Nice69\")-&gt;alphaNumeric();\n\n// Pass\n</code></pre> Parameters<pre><code>[\n    'error' =&gt; \"Only alphanumeric characters (a-z, A-Z, 0-9) allowed\" // (string)\n]\n</code></pre>"},{"location":"beets-php/form-validation/#email","title":"Email","text":"<p>Check if <code>$value</code> is a valid email address.</p> <pre><code>public function email(array $params = []): object\n{\n    ...\n}\n</code></pre> <p>The submitted email address is filtered and validated using the native PHP <code>filter_var($email, FILTER_VALIDATE_EMAIL)</code> function.</p> Example<pre><code>$Form-&gt;validate('input_email', \"user@example.com\")-&gt;email(); \n\n// Pass\n\n$Form-&gt;validate('input_email', \"user@example\")-&gt;email(); \n\n// Fail\n\n$Form-&gt;validate('input_email', \"example.com\")-&gt;email(); \n\n// Fail\n</code></pre> Parameters<pre><code>[\n    'error' =&gt; \"Invalid email format\" // (string)\n]\n</code></pre>"},{"location":"beets-php/form-validation/#is-filled","title":"Is Filled","text":"<p>Check if <code>$value</code> is filled. </p> <p><pre><code>public function isFilled(): bool\n{\n    ...\n}\n</code></pre> The method checks if the value is empty, null or the lenght is 0 and if so returns <code>false</code>. Spaces does not count as characters. An input containing only spaces is considered empty.</p> Example<pre><code>$Form-&gt;validate('input_field', \"Hello World!\")-&gt;isFilled();\n\n// true\n\n$Form-&gt;validate('input_field', \" \")-&gt;isFilled(); \n\n// false\n\n$Form-&gt;validate('input_field', null)-&gt;isFilled(); \n\n// false\n</code></pre> <p>This method does not generate an error message.</p>"},{"location":"beets-php/form-validation/#length","title":"Length","text":"<p>Check if the length of <code>$value</code> is between the given values.</p> <pre><code>public function length(int $minLength, int $maxLength, array $params = []): object\n{\n    ...\n}\n</code></pre> <p>The <code>length()</code> method uses the <code>lengthMin()</code> and <code>lengthMax()</code> methods for the calculations.</p> <p>You can set parameter <code>'allowEmpty' =&gt; true</code> if you want the value to be either empty or between an interval. Suitable for fields that are not required but needs limitations if filled.</p> <p>You can set an error message with the <code>error</code> parameter. This message will be used regardless if the value is too small or to large. You can also set the error messages for the min and max values respectively with <code>errorMin</code> and <code>errorMax</code>. If you don't set any error message, the default values for <code>lengthMin()</code> and <code>lengthMax()</code> will be used.</p> Parameters<pre><code>[\n    'allowEmpty' =&gt; false // (bool)\n    'error' =&gt; null // (string)\n    'errorMin' =&gt; null // (string) null = set in lengthMin()\n    'errorMax' =&gt; null // (string) null = set in lengthMax()\n]\n</code></pre> Example<pre><code>$Form-&gt;validate(\"input_field\", \"Doughnut\")-&gt;length(5, 10);\n\n// Pass\n\n$Form-&gt;validate(\"input_field\", \"\")-&gt;length(5, 10);\n\n// Fail (the length is 0 but needs to be at least 5)\n\n$Form-&gt;validate(\"input_field\", \"\")-&gt;length(5, 10, [\n    'allowEmpty' =&gt; true\n]);\n\n// Pass (the length is allowed to be 0 OR minimum 5)\n</code></pre>"},{"location":"beets-php/form-validation/#length-max","title":"Length Max","text":"<p>Check if the length of <code>$value</code> is smaller than given value.</p> <pre><code>public function lengthMax(int $maxLength, array $params = []): object\n{\n    ...\n}\n</code></pre> Parameters<pre><code>[\n    'error' =&gt; \"Too few characters\" // (string)\n]\n</code></pre> Example<pre><code>$Form-&gt;validate(\"input_field\", \"Big Tuna\")-&gt;lengthMax(10); // length = 8\n\n// Pass\n</code></pre>"},{"location":"beets-php/form-validation/#length-min","title":"Length Min","text":"<p>Check if the length of <code>$value</code> is greater than given value.</p> <pre><code>public function lengthMin(int $minLength, array $params = []): object\n{\n    ...\n}\n</code></pre> Parameters<pre><code>[\n    'error' =&gt; \"Too few characters\" // (string)\n]\n</code></pre> Example<pre><code>$Form-&gt;validate(\"input_field\", \"Hi!\")-&gt;lengthMin(5); // length = 3\n\n// Fail\n</code></pre>"},{"location":"beets-php/form-validation/#matching","title":"Matching","text":"<p>Check if <code>$value</code> matches another given value.</p> <pre><code>public function matching($matchingValue, array $params = []): object\n{\n    ...\n}\n</code></pre> <p>If the values does not match (<code>$x !== $y</code>) an error message is created. One example is comparing a password and password confirmation.</p> Parameters<pre><code>[\n    'error' =&gt; \"The values doesn't match\" // (string)\n]\n</code></pre> Example<pre><code>$password = \"pass111\";\n$password_conf = \"word999\";\n\n$Form-&gt;validate(\"input_password\", $password)-&gt;matching($password_conf);\n\n// Fail\n</code></pre>"},{"location":"beets-php/form-validation/#name","title":"Name","text":"<p>Decide if <code>$value</code> has name forat.</p> <pre><code>public function name(array $params = []): object\n{\n    ...\n}\n</code></pre> <p>This method will check if <code>$value</code> has the correct length and characters. It can only contain alphabetic unicode characters, spaces and hyphens (-). If it contains any other character or number, the validation will fail.</p> <p>To limit the length of the name you use the <code>min</code> and <code>max</code> parameters. You can not use the <code>lengthMin()</code>, <code>lengthMax()</code> or <code>length()</code> methods with this method.</p> <p>If you want the name field to be able to be empty when not <code>required()</code>, you must set parameter <code>'min' =&gt; 0</code> since the default minimum length of a name is 1 character.</p> Parameters<pre><code>[\n    'error' =&gt; \"Invalid name format\" // (string)\n    'max' =&gt; 64 // (int)\n    'min' =&gt; 1 // (int)\n]\n</code></pre> Example<pre><code>$Form-&gt;validate('input_name', \"Michael Scott\")-&gt;name();\n\n// Pass\n\n$Form-&gt;validate('input_name', \"Michael Scott\")-&gt;name(['max' =&gt; 5]);\n\n// Fail (name can be max 5 characters)\n\n$Form-&gt;validate('input_name', \"\")-&gt;name();\n\n// Fail (name is empty, must be 1-50 characters by default)\n\n$Form-&gt;validate('input_name', \"\")-&gt;name(['allowEmpty' =&gt; true]);\n\n// Pass (name is allowed to be empty)\n</code></pre>"},{"location":"beets-php/form-validation/#numeric","title":"Numeric","text":"<p>Check if <code>$value</code> ony contains numeric characters (0-9).</p> <pre><code>public function numeric(array $params = []): object\n{\n    ...\n}\n</code></pre> Parameters<pre><code>[\n    'error' =&gt; \"Only numeric characters (0-9) allowed\" // (string)\n]\n</code></pre> Example<pre><code>$Form-&gt;validate(\"input_field\", 69)-&gt;numeric();\n\n// Pass (nice)\n</code></pre>"},{"location":"beets-php/form-validation/#password","title":"Password","text":"<p>Check if <code>$value</code> is a valid password.</p> <pre><code>public function password(array $params = []): object\n{\n    ...\n}\n</code></pre> <p>This method can be modified to fit your password preferences. By default every character is allowed and there is no minimum requirement for the password other than the length.</p> <p>You can set the length of the password by using the <code>min</code> and <code>max</code> parameters or change the the values <code>PASSWORD_MIN_LENGTH</code> and <code>PASSWORD_MAX_LENGTH</code> in app.php to make an app-wide change.</p> Parameters<pre><code>[\n    'error' =&gt; \"Invalid password format\" // (string)\n    'max' =&gt; 50 // (int)\n    'min' =&gt; 6 // (int)\n]\n</code></pre> Example<pre><code>$Form-&gt;validate('input_password', \"password#123!\")-&gt;password();\n\n// Pass\n\n$Form-&gt;validate('input_password', \"toby\")-&gt;password();\n\n// Fail (password must be min 6 characters bu default)\n</code></pre>"},{"location":"beets-php/form-validation/#regex","title":"RegEx","text":"<p>Check if <code>$value</code> matched the given regular expression.</p> <pre><code>public function regex(string $regularExpression, array $params = []): object\n{\n    ...\n}\n</code></pre> Parameters<pre><code>[\n    'error' =&gt; \"The field contains characters that are not allowed\" // (string)\n]\n</code></pre> Example<pre><code>$Form-&gt;validate(\"input_field\", \"Hello\")-&gt;regex('/[^\\p{L} -]+/u');\n\n// Pass\n\n$Form-&gt;validate(\"input_field\", \"Nr#one!\")-&gt;regex('/[^\\p{L} -]+/u');\n\n// Fail (# and ! are not allowed)\n</code></pre>"},{"location":"beets-php/form-validation/#required","title":"Required","text":"<p>Check if <code>$value</code> is filled.</p> <pre><code>public function required(array $params = []): object\n{\n    ...\n}\n</code></pre> <p>The <code>required()</code> method uses the <code>isFilled()</code> method to check if the input has been submitted correctly. If the <code>$value</code> is considered empy or null, an error message is generated.</p> Parameters<pre><code>[\n    'error' =&gt; \"The field is required\" // (string)\n]\n</code></pre> Example<pre><code>$Form-&gt;validate('input_field', \"Boom, roasted\")-&gt;required();\n\n// Pass\n\n$Form-&gt;validate('input_field', \" \")-&gt;required();\n\n// Fail\n</code></pre>"},{"location":"beets-php/form-validation/#unique","title":"Unique","text":"<p>Check if <code>$value</code> is already stored in the database.</p> <pre><code>public function unique(string $col, string $table, array $params = []): object\n{\n    ...\n}\n</code></pre> <p>Insert the column and table names that should be checked in the database. If <code>$value</code> already exists in the given table and column, an error message is generated. </p> <p>A common use case is to check if an email address already exists in the database.</p> <p>The parameter <code>'ignore'</code> can be used to ignore a row ID from the search. Example: when a user is updating their profile and their email is already in the db and should not trigger an error message.</p> Parameters<pre><code>[\n    'error' =&gt; \"The value already exists\" // (string)\n    'ignore' =&gt; null, // (int) Row ID\n]\n</code></pre> Example<pre><code>$Form-&gt;validate('input_email', $email)-&gt;unique('email_col', 'users_tbl');\n\n// Pass if no match in db\n// Fail if match in db\n</code></pre>"},{"location":"beets-php/redirecting/","title":"Redirecting","text":"<p>With Beets PHP you get a convenient way to redirect the user to a different page using the Redirect class. This is a simple but effective class.</p>"},{"location":"beets-php/redirecting/#redirectphp","title":"Redirect.php","text":"Location<pre><code>~/app/core/Redirect.php\n</code></pre> Namespace<pre><code>namespace App\\Core;\n</code></pre> Import<pre><code>use App\\Core\\Redirect;\n</code></pre>"},{"location":"beets-php/redirecting/#how-to-redirect","title":"How to redirect","text":"<p>By calling the redirect class you get access to the <code>to()</code> setter that sets the <code>$targetPath</code> property to the target path of the redirect. The class destructor then runs the <code>header()</code> function using <code>$targetPath</code>.</p> <pre><code>use App\\Core\\Redirect;\n\nRedirect::to('/users');\n</code></pre> <p>This example will redirect the visitor to the <code>/users</code> page.</p>"},{"location":"beets-php/redirecting/#redirect-with-a-flash-message","title":"Redirect with a flash message","text":"<p>If you cascade the <code>to()</code> method with the <code>with()</code> method you can pass along a flash message. This is convenient way to make your code more compact and easy to read. The <code>with()</code> methoid basically just uses the <code>Session::flash()</code>method so you use it in the same way.</p> <p>The Session class has been included within the Redirect class due to the dependency so you do not need to include it again to just set the flash message.</p> <pre><code>use App\\Core\\Redirect;\n\nRedirect::to('/users')-&gt;with('message', 'The user was saved!');\n</code></pre> <p>To catch the message you get it like normal:</p> .../users<pre><code>use App\\Core\\Session;\n\necho Session::get('message'); // The user was saved!\n</code></pre>"},{"location":"beets-php/sessions/","title":"Sessions","text":"<p>With Beets PHP you get a convenient session handling. With the built in methods you can easily set, get and reset custom keys. With a flash session, you can create values that is flushed (unset) automatically and directly after a page load. This is perfect for alerts!</p>"},{"location":"beets-php/sessions/#sessionphp","title":"Session.php","text":"Location<pre><code>~/app/core/Session.php\n</code></pre> Namespace<pre><code>namespace App\\Core;\n</code></pre> Import<pre><code>use App\\Core\\Session;\n</code></pre>"},{"location":"beets-php/sessions/#about-flash-messages","title":"About flash messages","text":"<p>A flash message is used to temporarely show a message and then immediately delete it. A common use case is when you need to show an alert when a task was successful (or unsuccessful), like \"The post has been created\".</p> <p>With Beets PHP, the flash messages is automatically deleted (unflashed) when the index page (~/public/index.php) has been loaded, right after the massage has been showed.</p> <p>The flash messages is stored in the global session array with the key <code>_flash</code>, like this:</p> <pre><code>$_SESSION[\"_flash\"][$key] = $value;\n</code></pre>"},{"location":"beets-php/sessions/#set-a-flash-message","title":"Set a flash message","text":"<p>Setting a flash message is really easy with the provided <code>flash()</code> method:</p> <pre><code>Session::flash(\"message\", \"This is a flash message!\");\n</code></pre> <p>This code will set the <code>$key</code> to \"message\" and the <code>$value</code> to \"This is a flash message!\". You can name the key anything you want that makes sense for the nature of the message. For instance \"error\" if you are setting an error message.</p>"},{"location":"beets-php/sessions/#get-the-flash-message","title":"Get the flash message","text":"<p>When the flash message has been set, you can get it by calling the <code>get()</code> method like this:</p> <pre><code>Session::flash(\"message\", \"This is a flash message!\");\n\necho Session::get(\"message\"); // This is a flash message!\n</code></pre> <p>The <code>get()</code> method recieves two parameters, the key and the optional fallback value. The method will first check if the given key exists in the _flash array (<code>$_SESSION[_flash][$key]</code>). Then, if the key does not exists in the _flash array, it will check in the global session (<code>$_SESSION[$key]</code>). If the key exists i neither of these arrays, the method will return the fallback value which is <code>null</code> by default. </p> <p>This might be useful if the message is dependent on user input.</p> <p>The code below will demonstrate what will happen if the given key does not exist in the session.</p> <pre><code>Session::flash(\"message\", \"This is a message\");\n\necho Session::get(\"msg\", \"Error\"); // Error\n</code></pre> <p>This code will echo out \"Error\" since the key \"msg\" was not set in the flash array (\"message\" was) and it does not exist in the global session array (<code>$_SESSION[\"msg\"]</code>).</p>"},{"location":"beets-php/sessions/#reset-the-flash-message","title":"Reset the flash message","text":"<p>The flash message is automatically unflashed (unset or reset) at the end of the page load. However, if you want to manually unflash the session, you can do it with the with the <code>unflash()</code> method:</p> <pre><code>Session::unflash();\n</code></pre> <p>The <code>unflash()</code> method does not return anything (return type: void) and does not  accept any parameters.</p>"},{"location":"beets-php/sessions/#custom-sessions","title":"Custom sessions","text":"<p>If you don't want your session to be reset after every page load like the flash messages does, you can set you own keys to the global session variable with the <code>put()</code> method:</p> <pre><code>Session::put(\"myName\", \"Dwight\"); // $_SESSION[\"myName\"] = \"Dwight\"\n</code></pre> <p>To get the session variable you use the same method as with the flash messages, the <code>get()</code> method:</p> <pre><code>echo Session::get(\"myName\"); // Dwight\n</code></pre> <p>Just like when getting flash messages, you can insert a fallback value in case the key you are looking for does not exist in the session. The code below will echo out \"Error\" since the key \"name\" does not exist in the session.</p> <pre><code>Session::put(\"myName\", \"Dwight\");\n\necho Session::get(\"name\", \"Error\"); // Error\n</code></pre> <p>To remove the value and key from the session you use the method <code>flush()</code> which you can read more about below.</p>"},{"location":"beets-php/sessions/#check-if-a-key-exists-in-the-session","title":"Check if a key exists in the session","text":"<p>There is a practical method you can use if you just want to verify if a specific key exists in the session. Use the <code>has()</code> method and insert the key as a parameter. The method will only return a boolean and it makes use of the <code>get()</code> method for checking, so this works with both custom session variables and flash messages.</p> <pre><code>Session::put(\"myKey\", \"myValue\");\n\necho Session::has(\"myKey\") ? \"true\" : \"false\"; // true\n</code></pre>"},{"location":"beets-php/sessions/#empty-the-session","title":"Empty the session","text":"<p>You can empty the whole session by setting it to an empty array, or you can unset only a given key with the <code>flush()</code> method.</p> <p>To empty the whole session, you leave the paramaters empty.</p> <pre><code>Session::flush(); // Empty the whole session\nSession::flush(\"myName\") // Empty only the key \"myName\"\n</code></pre> <p>If a parameter (key) is set, the key will be unset (<code>unset($_SESSION[$key])</code>) instead of being set to an empty array.</p>"},{"location":"beets-php/sessions/#destroying-the-session","title":"Destroying the session","text":"<p>The <code>destroy()</code> method will destroy the whole session, including the logged in user credentials. It will flush the session, destroy it and reset the coockie parameters. This method is called when a user is logging out.</p> <p>The method is not returning anything (return type: void) and does not accept any parameters. To execute it, you just call it:</p> <pre><code>Session::destroy(); // Destroy the session\n</code></pre>"},{"location":"beets-php/user-authentication/","title":"User authentication","text":""},{"location":"beets-php/authentication/about/","title":"About","text":"<p>Beets PHP comes with a fully functional user authentication and authorization system with permissions, user roles, password reset and profile page with the ability to upload a profile picture.</p> <p>By working with the permissions and roles functions like <code>admin()</code> and <code>permission('edit_user')</code> you can easily control what parts of the UI and backend are accesseble to the users.</p> <p>When a user has forgotten its password, an email is sent to the registered user account email with instructions on how to set a new password. The link is only active for a limited time and can only be used once.</p>"},{"location":"beets-php/authentication/database/","title":"Database","text":"<p>The database comes with four tables that are user with the user authentication and authorization. When making you SQL queries, you can access their names using constands that are defined in ~/config/app.php.</p>"},{"location":"beets-php/authentication/database/#tables","title":"Tables","text":"<p>The table names can be accessed by constants defined in ~/config/app.php.</p> <pre><code>define('DB_USER_ACCOUNTS', 'admin__user_accounts');\ndefine('DB_ROLES', 'admin__roles');\ndefine('DB_PERMISSIONS', 'admin__permissions');\ndefine('DB_PERMISSIONS_REL', 'admin__permissions_relations');\n</code></pre>"},{"location":"beets-php/authentication/database/#admin__user_accounts","title":"admin__user_accounts","text":"<p>This table contains the user accounts and all their info, including encrypted passwords.</p>"},{"location":"beets-php/authentication/database/#admin__roles","title":"admin__roles","text":"<p>This table contains all of your user roles.</p>"},{"location":"beets-php/authentication/database/#admin__permissions","title":"admin__permissions","text":"<p>This table contains all the different permissions you have in you application.</p>"},{"location":"beets-php/authentication/database/#admin__permissions_relations","title":"admin__permissions_relations","text":"<p>This table contains the relations betseen the permissions and roles so that the correct permissions are assigned the right roles.   </p>"},{"location":"beets-php/authentication/database/#starter-users","title":"Starter-users","text":"<p>There are three users included in the database when you install Beets PHP, one for each user role. The credentials are listed in the table below. You can use these users to setup and test your application.</p> <p>Make sure to delete these users before publishing your application!</p> Email Password Role sysadmin@sysadmin.com sysadmin sysadmin admin@admin.com admin admin user@user.com user user"},{"location":"beets-php/authentication/login-logout/","title":"Logging in and out","text":"<p>This page describes how the login and logout works.</p>"},{"location":"beets-php/authentication/login-logout/#logging-in","title":"Logging in","text":"<p>You access the login page by going to <code>/login</code> or <code>/</code> when logged out.</p> <p>By making a POST request to the /login route an attempt is made to match the submitted credentials. </p> <pre><code>&lt;form method=\"POST\" action=\"/login\" name=\"login-form\" id=\"loginForm\"&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\"&gt;\n    &lt;input type=\"password\" id=\"password\" name=\"password\"&gt;\n    &lt;input type=\"submit\" value=\"Log in\"&gt;\n&lt;/form&gt;\n</code></pre> <p>If the attempt is a success, a users session array is created and the user is redirected to the start page. The users array contains information about the user that is stored in the database, as well as its role and permissions.</p> <p>To access the information in the users session, use the <code>User</code> class which have convenient methods for accessing various data, for instance <code>User::fullName()</code>. Read more about the User class here.</p>"},{"location":"beets-php/authentication/login-logout/#logging-out","title":"Logging out","text":"<p>To log the user out you need to make a DELETE request to the /login route: </p> <pre><code>&lt;form method=\"POST\" action=\"/login\"&gt;\n    &lt;?= method('DELETE') ?&gt;\n    &lt;button type=\"submit\"&gt;Log out&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>When logging out, the user session will be destroyed, the cookies reset and the user is redirected to the start page which is now the login form.</p>"},{"location":"beets-php/authentication/login-validation/","title":"Login validation","text":"<p>To see if a user has logged in or not, we have a couple of handy methods. They check wether a user session has been created.</p> Example<pre><code>use App\\Core\\Authenticate as Auth;\n\nif (Auth::check()) {\n    echo \"Logged in\";\n}\n\nif (Auth::guest()) {\n    echo \"Not logged in\";\n}\n</code></pre> <p>There are also helper functions that might be more convenient to use, especially within the views.</p> <pre><code>if (auth()) {\n    echo \"Logged in\";\n}\n\nif (guest()) {\n    echo \"Not logged in\";\n}\n</code></pre> <pre><code>&lt;?php if (auth()) : ?&gt;\n&lt;p&gt;This text is shown when logged in\"&lt;/p&gt;\n&lt;?php endif; ?&gt;\n</code></pre> <p>The helper functions are located in <code>~/app/core/includes/auth.php</code>.</p>"},{"location":"beets-php/authentication/passwords/","title":"Passwords","text":"<p>The password management is handled by the <code>PasswordController.php</code> and <code>Password.php</code> model.</p> <p>A password is set by the admin when a user is created. The user can change password by itsel by accessing its profile page. An admin can also change tha password using the edit page for the user.</p>"},{"location":"beets-php/authentication/passwords/#forgot-password","title":"Forgot password?","text":"<p>If your users have forgotten their password, they can reset it by themselves easily by using the \"forgot password?\" feature. There is a link in the login form to the page <code>/reset-password</code>.</p> <p>The user enters its registered email addres and an email with instructions will be sent to that email address if it exists. For security reasons there is no error message if the email does not exist so the user must keep an eye out in its inbox.</p> <p>The email contains a link with a token that is used to connect the email recipient with the user account. By visiting the link the user can select a new password. When it is done, the token is deleted and the link is not accessible any more. </p> <p>The token and link is only enabled for a limited time (default = 1 hour). If you want to change this, you can do it by changing the php constant <code>PASSWORD_RESET_TOKEN_EXPIRATION</code> in ~/config/app.php. </p>"},{"location":"beets-php/authentication/passwords/#passwordphp","title":"Password.php","text":"Location<pre><code>~/app/models/authenticate/Password.php\n</code></pre> Namespace<pre><code>namespace App\\Models\\Authenticate;\n</code></pre> Import<pre><code>use App\\Models\\Authenticate\\Password;\n</code></pre>"},{"location":"beets-php/authentication/passwords/#password-reset-token","title":"Password reset token","text":"<p>When a user wants to reset its password, a token is saved to the users post in the database along with a timestamp. The timestamp is used to determine if the token is still valid or not.</p>"},{"location":"beets-php/authentication/passwords/#generate-a-new-token","title":"Generate a new token","text":"<p>A new password reset token is generated by running the <code>generateToken()</code> method. The methods will generate a token that is unique (that doeas note already exists in the database). The user ID is passed so that the token can be saved to the database.</p> <pre><code>$token = Password::generateToken($userId);\n</code></pre> <p>Example of a token:</p> <pre><code>f0621c42dfd2e0ac3969b97d02a38807\n</code></pre>"},{"location":"beets-php/authentication/passwords/#check-token-validity","title":"Check token validity","text":"<p>When the user tries to access the form to select a new password, the token is checked so that it is still valid. The default length is 1 hour but can be changed in ~/config/app.php (<code>PASSWORD_RESET_TOKEN_EXPIRATION</code>).</p> <p>If the expiration time has passed the token is deleted and the method returns <code>false</code>.</p> <pre><code>if (! Password::checkToken($token)) {\n    App::abort();\n}\n</code></pre>"},{"location":"beets-php/authentication/passwords/#delete-token","title":"Delete token","text":"<p>The token is deleted by overwriting it with <code>null</code> in the database along with its created date. The user ID is used to fint the correct row.</p> <pre><code>Password::deleteToken($userId);\n</code></pre>"},{"location":"beets-php/authentication/passwords/#get-token-expiration","title":"Get token expiration","text":"<p>You can use the <code>expiresAt()</code> method to show the user or admin when a token expires.</p> <pre><code>$expiration = Password::expiresAt($tokenId);\n</code></pre>"},{"location":"beets-php/authentication/passwords/#update-a-password","title":"Update a password","text":"<p>The <code>update()</code> method will compare the new password with the second entry, hash it and store it in the database. Any errors will be flashed.</p> <p>The method takes the new and repeated password, the user ID (that owns the pasword) and the ID of the user that changes the password. The same method is used through out the whole app so when an admin changes the password for a user, the admin's ID is stored in the database for latest update. If the user is using the \"forgot password?\" feature or is changing it via the profile, the same use ID is passed.</p> <p>We get the user ID that belongs to the token using the <code>getUserId()</code> method.</p> <pre><code>$userId = Password::getUserId($token);\n\nif (! Password::update($passwordNew, $passwordRepeat, $userId, $userId)) {\n    Redirect::to(\"/reset-password/new?token=$token\")-&gt;with('feedback', 'password_update_failed');\n}\n</code></pre>"},{"location":"beets-php/authentication/passwords/#emails","title":"Emails","text":"<p>Emails are sent to the user when the password is changed using the \"forgot password?\" feature.</p> <p>In development we use MailHog to \"send\" the emails. Access MailHog by visiting http://localhost:8025. The setup is done in <code>Dockerfile</code> and <code>docker-compose.yml</code>.</p>"},{"location":"beets-php/authentication/passwords/#check-if-email-exists","title":"Check if email exists","text":"<p>Before generating a token and sending an email we must check if the email exists in the database. You can use the <code>checkEmail()</code> method for this.</p> <pre><code>$userId = Password::checkEmail($email);\n\nif (! $userId) {\n    // Redirect back\n}\n</code></pre>"},{"location":"beets-php/authentication/passwords/#reset-email","title":"Reset email","text":"<p>The email that contains the link and token for the new password form is sent using the <code>sendResetEmail()</code> method. The mathod takes the user's email address and the token.</p> <pre><code>Password::sendResetEmail($email, $token);\n</code></pre>"},{"location":"beets-php/authentication/passwords/#confirmation-email","title":"Confirmation email","text":"<p>When the password has changed we can send a confirmation email to the user. If we don't have the user email at this point we can use the <code>getEmail()</code> method.</p> <pre><code>$email = Password::getEmail($userId);\n\nPassword::sendConfirmationEmail($email);\n</code></pre>"},{"location":"beets-php/authentication/profile/","title":"Profile page","text":"<p>The profile page is the page that the logged in user can change its information. Any user can access this page regardless of user role. The default layout is the same as the edit user page but missing is the ability to change user role and to deactivate the account. </p> <p>This is important because you have the possibility to limit what the logged in users can do. If you don't want them to be able to update the email address, you can disable this for the profile page by changing the input field to a read-only field and removing the column from the SQL query in the model.</p> <p>The Profile model and ProfileController helps you with you actions for this page.</p>"},{"location":"beets-php/authentication/profile/#profilecontroller","title":"ProfileController","text":"Location<pre><code>~/app/http/controllers/ProfileController.php\n</code></pre> Namespace<pre><code>namespace App\\Http\\Controllers;\n</code></pre> Import<pre><code>use App\\Http\\Controllers\\ProfileController;\n</code></pre> <p>The ProfileController is small and contains only of the <code>update()</code> method that updates the profile, and <code>edit()</code> method that shows the profile page.</p>"},{"location":"beets-php/authentication/profile/#profile-model","title":"Profile model","text":"Location<pre><code>~/app/models/Profile.php\n</code></pre> Namespace<pre><code>namespace App\\Models;\n</code></pre> Import<pre><code>use App\\Models\\Profile;\n</code></pre>"},{"location":"beets-php/authentication/profile/#user-data","title":"User data","text":"<p>To get the user data when showing the profile page, we can use the <code>find()</code> or <code>findOrFail()</code> methods. None of these methods take an argument or a user ID since they should only return values for the logged in user. They both use <code>User::id()</code> toghether with <code>User::find()</code> and <code>User::findOrFail()</code> to get the user data. You can read about how these methods work on the User methods page.</p> ProfileController.php<pre><code>public static function edit()\n{\n    $user = Profile::findOrFail();\n\n    return App::view('profile.php', ['user' =&gt; $user]);\n}\n</code></pre> Profile.php<pre><code>public static function findOrFail()\n{\n    return User::findOrFail(User::id());\n}\n</code></pre> <p>When a user is updating the account information, the <code>Profile::update()</code> method is run. The method validates the input fields, executes the SQL query and updates the user session with the new information.</p> ProfileController.php<pre><code>if (! Profile::update($_POST)) {\n    Redirect::to(\"/profile\")-&gt;with('feedback', 'profile_update_failed');\n}\n</code></pre>"},{"location":"beets-php/authentication/profile/#profile-image","title":"Profile image","text":"<p>The user can change the profile image and the ProfileController uses the User model to do this. By using <code>User::updateImage()</code> and <code>User::deleteImage()</code> we get the same functionality as an admin.</p> ProfileController.php<pre><code>if (! User::updateImage(User::id())) {\n    Redirect::to(\"/profile\")-&gt;with('feedback', 'image_update_failed');\n}\n\nif (! User::deleteImage(User::id())) {\n    Redirect::to(\"/profile\")-&gt;with('feedback', 'image_delete_failed');\n}\n</code></pre>"},{"location":"beets-php/authentication/profile/#password","title":"Password","text":"<p>When the users change their password we use the same method that the \"forgot password?\" and admin pages uses to get consistance and the same level of security.</p> ProfileController.php<pre><code>if (! Password::update(\n    $_POST['password'], \n    $_POST['password_repeat'], \n    User::id()\n)) {\n    Redirect::to(\"/profile\")-&gt;with('feedback', 'password_update_failed');\n}\n</code></pre>"},{"location":"beets-php/authentication/roles-and-permissions/","title":"Roles and permissions","text":"<p>By giving the users different roles you can limit what they can do in your app. The roles have different permissions assigned to them to make it easy for you to fine tune the limitations. </p> <p>The starter-users have the roles user, admin and sysadmin assigned to them so that you can test your permissions and roles. These are the default permissions for each role, but feel free to thange them as you need!</p> Permisson syadmin admin user view_users_list view_user add_user edit_user delete_user <p>The relation between the roles and permissions are set in the table <code>admin__permissions_relations</code> in the database.</p>"},{"location":"beets-php/authentication/roles-and-permissions/#helper-functions","title":"Helper functions","text":"<p>You can limit actions by user roles or permissions with these helper functions.</p> <pre><code>if (permission('add_user')) {\n    echo \"&lt;button&gt;Add User&lt;/button&gt;\";\n}\n</code></pre> <p>All users that has the permission \"add_user\" assigned to their role will see the button. This is effective if you need multiple roles to access an action. You can also build a UI to change what permissions belongs to which roles for  increased flexibility. This even opens up for you to create custom roles on the go by making an interface for setting up this function.</p> <p>THe <code>permissions()</code> function checks if the permission (add_user in this case) exists in the array of permissions for the logged in user (<code>Auth::permissions()</code>).</p> <pre><code>if (role('admin')) {\n    echo \"&lt;button&gt;Add User&lt;/button&gt;\";\n}\n</code></pre> <p>This way you can hide the button for all users that are not admins. You can also use any of these functions instead of <code>role()</code> to shorten the code and make it more readable. All these functions uses the <code>Auth::hasRole()</code> method to check if the logged in user is assigned the given role.</p> <ul> <li><code>user()</code></li> <li><code>admin()</code></li> <li><code>sysadmin()</code></li> </ul> PHP Example<pre><code>if (permission('add_user')) { echo \"Add user\"; }\n\nif (sysadmin()) { echo \"Delete user\"; }\nif (sysadmin() || admin()) { echo \"Edit user\"; }\n</code></pre> HTML Example<pre><code>&lt;?php if (permission('add_user)) : ?&gt;\n&lt;button&gt;Add User&lt;/button&gt;\n&lt;?php endif; ?&gt;\n\n&lt;?php if (sysadmin()) : ?&gt;\n&lt;button&gt;Delete User&lt;/button&gt;\n&lt;?php endif; ?&gt;\n\n&lt;?php if (sysadmin() || admin()) : ?&gt;\n&lt;button&gt;Edit User&lt;/button&gt;\n&lt;?php endif; ?&gt;\n</code></pre>"},{"location":"beets-php/authentication/roles-and-permissions/#permission-methods","title":"Permission methods","text":"Location<pre><code>~/app/models/authenticate/Permission.php\n</code></pre> Namespace<pre><code>namespace App\\Models\\Authenticate;\n</code></pre> Import<pre><code>use App\\Models\\Authenticate\\Permission;\n</code></pre> <p>The Permission model proveides you with a couple of methods for retrieving a user permissions.</p> <p>You can get an array of multiple permissions or a smaller array with only one permission depending on your needs.</p> <p>You can get a specific permission data with the <code>find()</code> method and the permission ID. This method will return an array of data.</p> <pre><code>$permission = Permission::find(123);\n</code></pre> <p>You can use the <code>findByRole()</code> method, that takes a role ID, if you want to get all permissions with all data that belongs to a given role. Since the role ID is set on the user, it's easy to get the role ID with <code>User::role()</code> and pass it in the method to get all permissions that are given to a user. </p> <p>This method is used to get the permissions data when logging in so if you want the permissions for the logged in user, just use <code>User::permissions()</code> for better performance.</p> <p>return a 404-error page if the user ID does not match any user in the database. The <code>find()</code> method is used to check for the user in the database.</p> <pre><code>$permission = User::findByRole(456);\n</code></pre> <p>To get an array of multiple permissions with their data, you can use the <code>get()</code> method. </p> <pre><code>$permissions = Permission::get();\n</code></pre> <p>This method can recieve two arguments to help you filter and sort your results; <code>orderBy</code> and <code>where</code>. These arguments are inserted as strings at the end of the query. Below are som examples of how to use them. This is also described on the Database workflow page.</p> <pre><code>$permissions = Permissions::get(\n    ['where' =&gt; ['name = add_user']]\n);\n\n$permissions = Permissions::get(\n    ['orderBy' = ['name ASC']]\n);\n</code></pre>"},{"location":"beets-php/authentication/roles-and-permissions/#role-methods","title":"Role methods","text":"Location<pre><code>~/app/models/authenticate/Role.php\n</code></pre> Namespace<pre><code>namespace App\\Models\\Authenticate;\n</code></pre> Import<pre><code>use App\\Models\\Authenticate\\Role;\n</code></pre> <p>The Role model proveides you with a couple of methods for retrieving role data.</p> <p>You can get an array of multiple roles or a smaller array with only one role depending on your needs.</p> <p>You can get a specific role data with the <code>find()</code> method and the role ID. This method will return an array of data.</p> <pre><code>$role = Role::find(123);\n</code></pre> <p>To get an array of multiple roles with their data, you can use the <code>get()</code> method. </p> <pre><code>$roles = Role::get();\n</code></pre> <p>This method can recieve two arguments to help you filter and sort your results; <code>orderBy</code> and <code>where</code>. These arguments are inserted as strings at the end of the query. Below are som examples of how to use them. This is also described on the Database workflow page.</p> <pre><code>$roles = Role::get(\n    ['where' =&gt; ['name = admin']]\n);\n\n$roles = Role::get(\n    ['orderBy' = ['name ASC']]\n);\n</code></pre>"},{"location":"beets-php/authentication/routes-and-views/","title":"Routes and views","text":"<p>There are a couple of routes registered in <code>~/routes/web.php</code> that are used for administate and access your user accounts. There are also some controllers, models and views to help you get started.</p>"},{"location":"beets-php/authentication/routes-and-views/#routes-and-controllers","title":"Routes and controllers","text":"<p>The following routes are registered in <code>~/routes/web.php</code> for the authentication controllers (and views).</p>"},{"location":"beets-php/authentication/routes-and-views/#logincontroller","title":"LoginController()","text":"Location<pre><code>~/app/http/controllers/authenticate/LoginController.php\n</code></pre> Rote Request method Function Description /login GET create() Login form /login POST store() Attempt logging in the user /login DELETE destroy() Log out the user"},{"location":"beets-php/authentication/routes-and-views/#passwordcontroller","title":"PasswordController()","text":"Location<pre><code>~/app/http/controllers/authenticate/PasswordController.php\n</code></pre> Rote Request method Function Description /reset-password GET create() Show reset password form /reset-password POST store() Generate token, send email /reset-password/new GET edit() Show new password form /reset-password/new PATCH update() Update password, send conf email"},{"location":"beets-php/authentication/routes-and-views/#usercontroller","title":"UserController()","text":"Location<pre><code>~/app/http/controllers/UserController.php\n</code></pre> Rote Request method Function Description /users GET index() List all users /users/{userId} GET show() Show a user /users/{userId}/edit GET edit() Show user edit form /users/{userId}/edit PATCH update() Update the user /users/{userId}/edit DELETE destroy() Delete the user /users/create GET create() Show create user form /users/create POST store() Save the user"},{"location":"beets-php/authentication/routes-and-views/#profilecontroller","title":"ProfileController()","text":"Location<pre><code>~/app/http/controllers/ProfileController.php\n</code></pre> Rote Request method Function Description /profile GET edit() Show profile edit form /profile PATCH update() Update the user"},{"location":"beets-php/authentication/routes-and-views/#views","title":"Views","text":"<p>The views are located in <code>~/public/views/authenticate</code> and <code>~/public/views/users</code>. The profile is located in <code>~/public/views</code>.</p>"},{"location":"beets-php/authentication/routes-and-views/#login-form","title":"Login form","text":"Location<pre><code>~/public/views/authenticate/login.php\n</code></pre> Path<pre><code>/login\n/\n</code></pre> <p>The login form can be accessed only if you are not logged in by visiting <code>/login</code> or <code>/</code>. When a visitor is trying to access a page that requires authentication, they will be redirected to the login form.</p> <p>Here is also a link to the reset password form (forgot password?).</p>"},{"location":"beets-php/authentication/routes-and-views/#reset-password-form","title":"Reset password form","text":"<p>The user submits their email address to generate a password reset token and send it to their email if it's registered in the database.</p> Location<pre><code>~/public/views/authenticate/reset-password.php\n</code></pre> Path<pre><code>/reset-password\n</code></pre>"},{"location":"beets-php/authentication/routes-and-views/#select-new-password-form","title":"Select new password form","text":"<p>This path is only available when the user has a valid password reset token.</p> <p>This form lets the user chose a new password fot the account. After the password has been updated, the token is deleted and the link no longer works.</p> Location<pre><code>~/public/views/authenticate/new-password.php\n</code></pre> Path<pre><code>/reset-password/new?token={token}\n</code></pre>"},{"location":"beets-php/authentication/routes-and-views/#list-all-users","title":"List all users","text":"<p>This page lists all users in the database. There are to tabs: active and inactive users. By clicking on the names you will show all the user information. If a password reset token has been created for a user, a key icon will be shown behind the name of the user.</p> Location<pre><code>~/public/views/users/index.php\n</code></pre> Path<pre><code>/users\n</code></pre>"},{"location":"beets-php/authentication/routes-and-views/#create-user","title":"Create user","text":"<p>Here you can create a new user.</p> Location<pre><code>~/public/views/users/create.php\n</code></pre> Path<pre><code>/users/create\n</code></pre>"},{"location":"beets-php/authentication/routes-and-views/#show-user","title":"Show user","text":"<p>Show all user information.</p> Location<pre><code>~/public/views/users/show.php\n</code></pre> Path<pre><code>/users/{userId}\n</code></pre>"},{"location":"beets-php/authentication/routes-and-views/#edit-and-delete-user","title":"Edit and delete user","text":"<p>Here you can edit the user information. You can also delete the youser from this view if you have the right permissions.</p> <p>Delete or inactivate an account?</p> <p>Usually you don't want to delete a user since that might leave orphan posts in the database. You can inactivate their account instead to keep the data but preventing the user to log in.</p> Location<pre><code>~/public/views/users/edit.php\n</code></pre> Path<pre><code>/users/{userId}/edit\n</code></pre>"},{"location":"beets-php/authentication/routes-and-views/#profile","title":"Profile","text":"<p>This view is for the logged in user to edit their own information. It provides less inromation than the edit page for admins for security reasons. The user can also update their password from this page.</p> Location<pre><code>~/public/views/profile.php\n</code></pre> Path<pre><code>/profile\n</code></pre>"},{"location":"beets-php/authentication/user-methods/","title":"User methods","text":""},{"location":"beets-php/authentication/user-methods/#get-user-data","title":"Get user data","text":"<p>You can get a user's data by multiple ways depending on what you need.</p>"},{"location":"beets-php/authentication/user-methods/#logged-in-user","title":"Logged in user","text":"<p>If you want the data of the logged in user, there are two ways. At the core, the Authenticate class methods will return any data in the user session.</p> Example<pre><code>use App\\Core\\Authenticate as Auth;\n\n$user = Auth::user(); // Array\n</code></pre> <pre><code>Auth::id();\nAuth::firstName();\nAuth::lastName();\nAuth::fullName();\nAuth::initials();\nAuth::email();\nAuth::image();\nAuth::role(); // Array\nAuth::permissions(); // Array\n</code></pre>"},{"location":"beets-php/authentication/user-methods/#update-logged-in-user-data","title":"Update logged in user data","text":"<p>The user session is created and populated when logging in. If you need to update the data during the session, you can do so with the <code>set()</code> method:</p> <pre><code>use App\\Core\\Authenticate as Auth;\n\nAuth::set('last_name', 'McNewname');\n</code></pre>"},{"location":"beets-php/authentication/user-methods/#logged-in-or-specific-user","title":"Logged in or specific user","text":"<p>You can also use the User class to get the same data as the Authenticate class. </p> Example<pre><code>use App\\Models\\User;\n\n$user = User::session(); // Array\n</code></pre> <p>The thing that differs is that you pass a user ID in the methods (not the <code>session()</code> method though). Then you will instead get the data of that perticular user. </p> <pre><code>User::firstName(); // For logged in user\nUser::firstName(123); // For user with ID 123\n</code></pre> <p>These methods are available with the User class and all can pass a user ID:</p> <pre><code>User::id();\nUser::firstName();\nUser::lastName();\nUser::fullName();\nUser::initials();\nUser::image();\nUser::role(); // Array\nUser::permissions(); // Array\n</code></pre> <p>Of course these methods are only meant for retrieving the ocational small data. If you want to get all of the users data, thera are other ways that don't require so many querys to be executed.</p>"},{"location":"beets-php/authentication/user-methods/#get-any-users-data","title":"Get any users data","text":"<p>You can get an array consisting of multiple users or a smaller array with only one user depending on your needs.</p> <p>You can get a specific user's data with the <code>find()</code> method and the user ID. This method will return an array of data.</p> <pre><code>$user = User::find(123);\n</code></pre> <p>You can use the <code>findOrFail()</code> method if you want to return a 404-error page if the user ID does not match any user in the database. The <code>find()</code> method is used to check for the user in the database.</p> <pre><code>$user = User::findOrFail(123);\n</code></pre> <p>To get an array of multiple users, you can use the <code>get()</code> method. </p> <pre><code>$users = User::get();\n</code></pre> <p>This method can recieve two arguments to help you filter and sort your results; <code>orderBy</code> and <code>where</code>. These arguments are inserted as strings at the end of the query. Below are som examples of how to use them. This is also described on the Database workflow page.</p> <pre><code>$users = User::get(\n    ['where' =&gt; ['status = 1']]\n);\n\n$users = User::get(\n    ['orderBy' = ['first_name ASC']]\n);\n\n$users = User::get(\n    ['where' =&gt; ['status = 1', 'role = 2']],\n    ['orderBy' =&gt; ['first_name ASC', 'last_name DESC']]\n);\n</code></pre>"},{"location":"beets-php/authentication/user-methods/#helpers","title":"Helpers","text":"<p>The class also contains a couple of helper methods that are used with the other methods or the <code>UserController</code>.</p>"},{"location":"beets-php/authentication/user-methods/#store-update-and-delete","title":"Store, update and delete","text":"<p>The <code>store()</code> and <code>update()</code> methods takes the form POST data and returns <code>true</code> if successful and <code>false</code> if not. <code>destroy()</code> takes the user ID that should be deleted and return <code>true</code> if successful.</p> <pre><code>User::store($_POST);\nUser::update($_POST);\nUser::destroy(123);\n</code></pre>"},{"location":"beets-php/authentication/user-methods/#profile-images","title":"Profile images","text":"<p>To update and delete the user profile image, we can use the <code>imageDelete()</code> and <code>imageUpdate()</code> methods that takes the user ID that owns the image. These are used in multiple places as well as the <code>ProfileController</code>.</p> <p>Deleting the image removes it from the storage and from the user account column in the database. The session data will be udated when this is done so the user does not have to log out and in to see the changes.</p> <p>When updating, the method can grab the file data directly from the <code>$_FILE</code> superglobal. It creates a new filename using the user ID and a timestamp using the <code>profileImageName()</code> helper function.</p> <pre><code>User::deleteImage(123);\nUser::updateImage(123);\n</code></pre>"},{"location":"beets-php/authentication/user-methods/#initials","title":"Initials","text":"<p>The <code>makeInitials()</code> method thakes a first name and a last name and returns the initials.</p> <pre><code>echo User::makeInitials('Dwight', 'Schrute'); // DS\n</code></pre>"},{"location":"beets-php/configuration/app/","title":"app.php","text":"<p>This file is for storing app-wide constants and variables that doesn't fit in the <code>.env</code> file. The file is located inside the <code>~/config/</code> folder.</p> ~/config/app.php<pre><code>// App\ndefine('APP_ROOT', $_SERVER['DOCUMENT_ROOT'] . '/..');\ndefine('APP_URL', $_ENV['APP_URL']);\ndefine('APP_ID', $_ENV['APP_ID']);\n\n// Paths\ndefine('PUBLIC_ROOT', $_SERVER['DOCUMENT_ROOT'] . '/');\ndefine('PUBLIC_URL', APP_URL . '/public/');\ndefine('STORAGE', PUBLIC_ROOT . 'storage/');\n\n// Password\ndefine('PASSWORD_MIN_LENGTH', 4);\ndefine('PASSWORD_MAX_LENGTH', 50);\ndefine('PASSWORD_RESET_TOKEN_EXPIRATION', 3600); // seconds\n\n// Database \ndefine('DB_USER_ACCOUNTS', 'admin__user_accounts');\ndefine('DB_ROLES', 'admin__roles');\ndefine('DB_PERMISSIONS', 'admin__permissions');\ndefine('DB_PERMISSIONS_REL', 'admin__permissions_relations');\n\n// Misc\ndefine('PROFILE_IMAGE_MAX_SIZE', 10000000); // 10000000 = 10 MB\n</code></pre>"},{"location":"beets-php/configuration/data/","title":"data.php","text":"<p>This file is for storing app-wide static data like arrays. The file is located inside the <code>~/config/</code> folder. </p> ~/config/data.php<pre><code>$userAccountStatusCodes = [\n    0 =&gt; [\n        'title' =&gt; 'Inactive account',\n        'short' =&gt; 'Inactive',\n    ],\n    1 =&gt; [\n        'title' =&gt; 'Active account',\n        'short' =&gt; 'Active',\n    ],\n];\n</code></pre>"},{"location":"beets-php/configuration/dotenv/","title":"dotenv.php","text":"<p>This file is loaded using the Composer autoloader in <code>~/composer.json</code> and enables the use of the env library throughout the application. The file is located inside the <code>~/config/</code> folder.</p> <p>Read more about how the required variables work on vlucas's GitHub.</p> ~/config/dotenv.php<pre><code>use Dotenv\\Dotenv;\n\n// Set the location of .env (shold be app root)\n$dotenv_location = __DIR__ . '../../';\n\n$dotenv = Dotenv::createImmutable($dotenv_location);\n$dotenv-&gt;load();\n\n// Keys that must exist in .env and also can not be empty\n$dotenv-&gt;required([\n    'DB_CONNECTION',\n    'DB_HOST',\n    'DB_PORT',\n    'DB_DATABASE',\n    'DB_USERNAME',\n])-&gt;notEmpty();\n\n// Keys that must exist in .env but can be empty\n$dotenv-&gt;required([\n    'DB_PASSWORD',\n]);\n</code></pre>"},{"location":"beets-php/configuration/env/","title":".env","text":"<p>This file contains the environmental variables that are used throughout the application. The library used for the env handlig is vlucas PHP dotenv. The file is located at the project root and is loaded via the <code>~/config/dotenv.php</code> file.</p> <p>Beets PHP comes with an example file named <code>.env.example</code> that you can modify to your needs.</p> <p>You can get more detailed descriptions and more functionality by visiting vlucas's GitHub.</p> ~/.env.example<pre><code>APP_NAME=\"My App\"\nAPP_DESCRIPTION=\"This is my app\"\nAPP_ID=1\nAPP_ENV=local\nAPP_DEBUG=true\nAPP_URL=http://myapp.local\nAPP_COPYRIGHT=\"The Owner\"\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=dbname\nDB_CHARSET=utf8mb4\nDB_USERNAME=username\nDB_PASSWORD=password\n\nCSRF_SECRET_KEY=secretkey\n</code></pre>"},{"location":"beets-php/configuration/env/#gitignore","title":".gitignore","text":"<p>Since this file can contain secrets as API credentials, password, internal paths, etc it should never be part of version control. Add the file to your <code>.gitignore</code> file.</p>"},{"location":"beets-php/configuration/env/#variables","title":"Variables","text":""},{"location":"beets-php/configuration/env/#nesting","title":"Nesting","text":"<p>You can nest your env variables to reduce repeated values, like so:</p> <pre><code>APP_SLUG=\"myapp\"\nAPP_URL=http://${APP_SLUG}.com\n</code></pre> <p>Read more on vlucas's GitHub.</p>"},{"location":"beets-php/configuration/env/#app_","title":"APP_","text":"<p>The <code>APP_*</code> variables can be used to store values that are app specific and not related to data or content. For instance the applications name, url or author.</p>"},{"location":"beets-php/configuration/env/#db_","title":"DB_","text":"<p>The <code>DB_*</code> variables are used within the Database.php class that handles your database requests so changing these variable names can break things.</p> <p>Every <code>DB_*</code> variable except <code>DB_CHARSET</code> is required to exist in the file as configured in the <code>~/config/dotenv.php</code> file.</p>"},{"location":"beets-php/configuration/env/#usage","title":"Usage","text":"<p>You can access your env variables uwing the <code>$_ENV</code> or <code>$_SERVER</code> super globals:</p> <pre><code>$appName = $_ENV['APP_NAME'];\n$appName = $_SERVER['APP_NAME'];\n</code></pre>"}]}